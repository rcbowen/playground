
f:/Code/playground/target/1.5.1/photon/playground.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002870  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a2890  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  20000000  080a2894  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000598  2000006c  2000006c  0003006c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a2900  080a2900  00022900  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a2928  080a2928  00022928  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000a5790  00000000  00000000  0002292c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000f8c1  00000000  00000000  000c80bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000fb28  00000000  00000000  000d797d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001c80  00000000  00000000  000e74a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002cd8  00000000  00000000  000e9125  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00027725  00000000  00000000  000ebdfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002489c  00000000  00000000  00113522  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a72c1  00000000  00000000  00137dbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000aee8  00000000  00000000  001df080  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f002 fa5d 	bl	80a24f0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f002 fa62 	bl	80a2506 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a2894 	.word	0x080a2894
 80a0050:	2000006c 	.word	0x2000006c
 80a0054:	2000006c 	.word	0x2000006c
 80a0058:	20000604 	.word	0x20000604
 80a005c:	20000604 	.word	0x20000604

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f000 fd93 	bl	80a0b8c <module_user_init_hook>
 80a0066:	4b07      	ldr	r3, [pc, #28]	; (80a0084 <module_user_init+0x24>)
 80a0068:	4c07      	ldr	r4, [pc, #28]	; (80a0088 <module_user_init+0x28>)
 80a006a:	461e      	mov	r6, r3
 80a006c:	1ae4      	subs	r4, r4, r3
 80a006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0070:	2500      	movs	r5, #0
 80a0072:	42a5      	cmp	r5, r4
 80a0074:	d004      	beq.n	80a0080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f8      	b.n	80a0072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0080:	bd70      	pop	{r4, r5, r6, pc}
 80a0082:	bf00      	nop
 80a0084:	080a2854 	.word	0x080a2854
 80a0088:	080a288c 	.word	0x080a288c

080a008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a008c:	f000 b812 	b.w	80a00b4 <setup>

080a0090 <module_user_loop>:
}

void module_user_loop() {
 80a0090:	b508      	push	{r3, lr}
    loop();
 80a0092:	f000 f81d 	bl	80a00d0 <loop>
    _post_loop();
}
 80a0096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a009a:	f000 bd39 	b.w	80a0b10 <_post_loop>

080a009e <_ZdlPv>:
 80a009e:	f000 bb5d 	b.w	80a075c <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <setup>:
int maxTemp = 40;

DHT dht(DHTPIN, DHTTYPE);

void setup()
{
 80a00b4:	b508      	push	{r3, lr}
  Serial.begin(9600);
 80a00b6:	f000 fe69 	bl	80a0d8c <_Z16_fetch_usbserialv>
 80a00ba:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a00be:	f000 fe4b 	bl	80a0d58 <_ZN9USBSerial5beginEl>
  dht.begin();
}
 80a00c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
DHT dht(DHTPIN, DHTTYPE);

void setup()
{
  Serial.begin(9600);
  dht.begin();
 80a00c6:	4801      	ldr	r0, [pc, #4]	; (80a00cc <setup+0x18>)
 80a00c8:	f000 b86e 	b.w	80a01a8 <_ZN3DHT5beginEv>
 80a00cc:	20000070 	.word	0x20000070

080a00d0 <loop>:
}

void loop()
{
 80a00d0:	b538      	push	{r3, r4, r5, lr}
  // Wait a few seconds between measurements.
  delay(2000);
 80a00d2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80a00d6:	f000 fcc9 	bl	80a0a6c <delay>

  // Reading temperature or humidity takes about 250 milliseconds!
  // Sensor readings may also be up to 2 seconds 'old' (its a very slow sensor)
  float h = dht.readHumidity();
 80a00da:	2100      	movs	r1, #0
 80a00dc:	481c      	ldr	r0, [pc, #112]	; (80a0150 <loop+0x80>)
 80a00de:	f000 f95b 	bl	80a0398 <_ZN3DHT12readHumidityEb>
  // Read temperature as Celsius
  float t = dht.readTemperature();
 80a00e2:	2200      	movs	r2, #0
  // Wait a few seconds between measurements.
  delay(2000);

  // Reading temperature or humidity takes about 250 milliseconds!
  // Sensor readings may also be up to 2 seconds 'old' (its a very slow sensor)
  float h = dht.readHumidity();
 80a00e4:	4605      	mov	r5, r0
  // Read temperature as Celsius
  float t = dht.readTemperature();
 80a00e6:	4611      	mov	r1, r2
 80a00e8:	4819      	ldr	r0, [pc, #100]	; (80a0150 <loop+0x80>)
 80a00ea:	f000 f901 	bl	80a02f0 <_ZN3DHT15readTemperatureEbb>

  // Check if any reads failed and exit early (to try again).
  if (isnan(h) || isnan(t))
 80a00ee:	4629      	mov	r1, r5

  // Reading temperature or humidity takes about 250 milliseconds!
  // Sensor readings may also be up to 2 seconds 'old' (its a very slow sensor)
  float h = dht.readHumidity();
  // Read temperature as Celsius
  float t = dht.readTemperature();
 80a00f0:	4604      	mov	r4, r0

  // Check if any reads failed and exit early (to try again).
  if (isnan(h) || isnan(t))
 80a00f2:	4628      	mov	r0, r5
 80a00f4:	f002 f9d8 	bl	80a24a8 <__aeabi_fcmpun>
 80a00f8:	b920      	cbnz	r0, 80a0104 <loop+0x34>
 80a00fa:	4621      	mov	r1, r4
 80a00fc:	4620      	mov	r0, r4
 80a00fe:	f002 f9d3 	bl	80a24a8 <__aeabi_fcmpun>
 80a0102:	b118      	cbz	r0, 80a010c <loop+0x3c>
  {
    Serial.println("Failed to read from DHT sensor!");
 80a0104:	f000 fe42 	bl	80a0d8c <_Z16_fetch_usbserialv>
 80a0108:	4912      	ldr	r1, [pc, #72]	; (80a0154 <loop+0x84>)
 80a010a:	e01d      	b.n	80a0148 <loop+0x78>
    return;
  }

  Serial.print("Humidity: ");
 80a010c:	f000 fe3e 	bl	80a0d8c <_Z16_fetch_usbserialv>
 80a0110:	4911      	ldr	r1, [pc, #68]	; (80a0158 <loop+0x88>)
 80a0112:	f000 fb8d 	bl	80a0830 <_ZN5Print5printEPKc>
  Serial.print(h);
 80a0116:	f000 fe39 	bl	80a0d8c <_Z16_fetch_usbserialv>
 80a011a:	2202      	movs	r2, #2
 80a011c:	4629      	mov	r1, r5
 80a011e:	f000 fc7d 	bl	80a0a1c <_ZN5Print5printEfi>
  Serial.print(" %\t");
 80a0122:	f000 fe33 	bl	80a0d8c <_Z16_fetch_usbserialv>
 80a0126:	490d      	ldr	r1, [pc, #52]	; (80a015c <loop+0x8c>)
 80a0128:	f000 fb82 	bl	80a0830 <_ZN5Print5printEPKc>
  Serial.print("Temperature: ");
 80a012c:	f000 fe2e 	bl	80a0d8c <_Z16_fetch_usbserialv>
 80a0130:	490b      	ldr	r1, [pc, #44]	; (80a0160 <loop+0x90>)
 80a0132:	f000 fb7d 	bl	80a0830 <_ZN5Print5printEPKc>
  Serial.print(t);
 80a0136:	f000 fe29 	bl	80a0d8c <_Z16_fetch_usbserialv>
 80a013a:	4621      	mov	r1, r4
 80a013c:	2202      	movs	r2, #2
 80a013e:	f000 fc6d 	bl	80a0a1c <_ZN5Print5printEfi>
  Serial.println(" *C ");
 80a0142:	f000 fe23 	bl	80a0d8c <_Z16_fetch_usbserialv>
 80a0146:	4907      	ldr	r1, [pc, #28]	; (80a0164 <loop+0x94>)
 80a0148:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Serial.print("Humidity: ");
  Serial.print(h);
  Serial.print(" %\t");
  Serial.print("Temperature: ");
  Serial.print(t);
  Serial.println(" *C ");
 80a014c:	f000 bb83 	b.w	80a0856 <_ZN5Print7printlnEPKc>
 80a0150:	20000070 	.word	0x20000070
 80a0154:	080a258c 	.word	0x080a258c
 80a0158:	080a25ac 	.word	0x080a25ac
 80a015c:	080a25b7 	.word	0x080a25b7
 80a0160:	080a25bb 	.word	0x080a25bb
 80a0164:	080a25c9 	.word	0x080a25c9

080a0168 <_GLOBAL__sub_I_maxHum>:
 80a0168:	b510      	push	{r4, lr}
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a016a:	f000 f949 	bl	80a0400 <HAL_Pin_Map>
 80a016e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#define DHTTYPE DHT11 // DHT 22  (AM2302)

int maxHum = 60;
int maxTemp = 40;

DHT dht(DHTPIN, DHTTYPE);
 80a0172:	2306      	movs	r3, #6
 80a0174:	220b      	movs	r2, #11
 80a0176:	2104      	movs	r1, #4
 80a0178:	4801      	ldr	r0, [pc, #4]	; (80a0180 <_GLOBAL__sub_I_maxHum+0x18>)
 80a017a:	f000 b805 	b.w	80a0188 <_ZN3DHTC1Ehhh>
 80a017e:	bf00      	nop
 80a0180:	20000070 	.word	0x20000070

080a0184 <_GLOBAL__sub_I__ZN11DHT_UnifiedC2Ehhhll>:
 80a0184:	f000 b93c 	b.w	80a0400 <HAL_Pin_Map>

080a0188 <_ZN3DHTC1Ehhh>:

#define MIN_INTERVAL 2000

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
  _pin = pin;
  _type = type;
 80a0188:	7182      	strb	r2, [r0, #6]
  #ifdef __AVR
    _bit = digitalPinToBitMask(pin);
    _port = digitalPinToPort(pin);
  #endif
  _maxcycles = microsecondsToClockCycles(1000);  // 1 millisecond timeout for
 80a018a:	4a05      	ldr	r2, [pc, #20]	; (80a01a0 <_ZN3DHTC1Ehhh+0x18>)
#include "DHT.h"

#define MIN_INTERVAL 2000

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
  _pin = pin;
 80a018c:	7141      	strb	r1, [r0, #5]
  _type = type;
  #ifdef __AVR
    _bit = digitalPinToBitMask(pin);
    _port = digitalPinToPort(pin);
  #endif
  _maxcycles = microsecondsToClockCycles(1000);  // 1 millisecond timeout for
 80a018e:	6812      	ldr	r2, [r2, #0]
 80a0190:	4904      	ldr	r1, [pc, #16]	; (80a01a4 <_ZN3DHTC1Ehhh+0x1c>)
 80a0192:	fbb2 f1f1 	udiv	r1, r2, r1
 80a0196:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a019a:	434a      	muls	r2, r1
 80a019c:	60c2      	str	r2, [r0, #12]
                                                 // reading pulses from DHT sensor.
  // Note that count is now ignored as the DHT reading algorithm adjusts itself
  // basd on the speed of the processor.
}
 80a019e:	4770      	bx	lr
 80a01a0:	20000004 	.word	0x20000004
 80a01a4:	000f4240 	.word	0x000f4240

080a01a8 <_ZN3DHT5beginEv>:

void DHT::begin(void) {
 80a01a8:	b510      	push	{r4, lr}
 80a01aa:	4604      	mov	r4, r0
  // set up the pins!
  pinMode(_pin, INPUT_PULLUP);
 80a01ac:	2102      	movs	r1, #2
 80a01ae:	7940      	ldrb	r0, [r0, #5]
 80a01b0:	f001 f81c 	bl	80a11ec <pinMode>
  // Using this value makes sure that millis() - lastreadtime will be
  // >= MIN_INTERVAL right away. Note that this assignment wraps around,
  // but so will the subtraction.
  _lastreadtime = -MIN_INTERVAL;
 80a01b4:	4b01      	ldr	r3, [pc, #4]	; (80a01bc <_ZN3DHT5beginEv+0x14>)
 80a01b6:	60a3      	str	r3, [r4, #8]
 80a01b8:	bd10      	pop	{r4, pc}
 80a01ba:	bf00      	nop
 80a01bc:	fffff830 	.word	0xfffff830

080a01c0 <_ZN3DHT11expectPulseEb>:
// used to compare the relative time of two pulses).  If more than a millisecond
// ellapses without the level changing then the call fails with a 0 response.
// This is adapted from Arduino's pulseInLong function (which is only available
// in the very latest IDE versions):
//   https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/wiring_pulse.c
uint32_t DHT::expectPulse(bool level) {
 80a01c0:	b570      	push	{r4, r5, r6, lr}
 80a01c2:	4605      	mov	r5, r0
 80a01c4:	460e      	mov	r6, r1
  uint32_t count = 0;
 80a01c6:	2400      	movs	r4, #0
      }
    }
  // Otherwise fall back to using digitalRead (this seems to be necessary on ESP8266
  // right now, perhaps bugs in direct port access functions?).
  #else
    while (digitalRead(_pin) == level) {
 80a01c8:	7968      	ldrb	r0, [r5, #5]
 80a01ca:	f001 f839 	bl	80a1240 <digitalRead>
 80a01ce:	42b0      	cmp	r0, r6
 80a01d0:	d107      	bne.n	80a01e2 <_ZN3DHT11expectPulseEb+0x22>
      if (count++ >= _maxcycles) {
 80a01d2:	68eb      	ldr	r3, [r5, #12]
 80a01d4:	1c62      	adds	r2, r4, #1
 80a01d6:	429c      	cmp	r4, r3
 80a01d8:	d201      	bcs.n	80a01de <_ZN3DHT11expectPulseEb+0x1e>
 80a01da:	4614      	mov	r4, r2
 80a01dc:	e7f4      	b.n	80a01c8 <_ZN3DHT11expectPulseEb+0x8>
        return 0; // Exceeded timeout, fail.
 80a01de:	2000      	movs	r0, #0
 80a01e0:	bd70      	pop	{r4, r5, r6, pc}
 80a01e2:	4620      	mov	r0, r4
      }
    }
  #endif

  return count;
}
 80a01e4:	bd70      	pop	{r4, r5, r6, pc}

080a01e6 <_ZN3DHT4readEb>:
  }

  return isFahrenheit ? hi : convertFtoC(hi);
}

boolean DHT::read(bool force) {
 80a01e6:	b530      	push	{r4, r5, lr}
 80a01e8:	460d      	mov	r5, r1
 80a01ea:	b0d1      	sub	sp, #324	; 0x144
 80a01ec:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a01ee:	f000 f95f 	bl	80a04b0 <HAL_Timer_Get_Milli_Seconds>
  // Check if sensor was read less than two seconds ago and return early
  // to use last reading.
  uint32_t currenttime = millis();
  if (!force && ((currenttime - _lastreadtime) < 2000)) {
 80a01f2:	b935      	cbnz	r5, 80a0202 <_ZN3DHT4readEb+0x1c>
 80a01f4:	68a3      	ldr	r3, [r4, #8]
 80a01f6:	1ac3      	subs	r3, r0, r3
 80a01f8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80a01fc:	d201      	bcs.n	80a0202 <_ZN3DHT4readEb+0x1c>
    return _lastresult; // return last correct measurement
 80a01fe:	7c20      	ldrb	r0, [r4, #16]
 80a0200:	e071      	b.n	80a02e6 <_ZN3DHT4readEb+0x100>
  }
  _lastreadtime = currenttime;

  // Reset 40 bits of received data to zero.
  data[0] = data[1] = data[2] = data[3] = data[4] = 0;
 80a0202:	2500      	movs	r5, #0
  // Send start signal.  See DHT datasheet for full signal diagram:
  //   http://www.adafruit.com/datasheets/Digital%20humidity%20and%20temperature%20sensor%20AM2302.pdf

  // Go into high impedence state to let pull-up raise data line level and
  // start the reading process.
  digitalWrite(_pin, HIGH);
 80a0204:	2101      	movs	r1, #1
  // to use last reading.
  uint32_t currenttime = millis();
  if (!force && ((currenttime - _lastreadtime) < 2000)) {
    return _lastresult; // return last correct measurement
  }
  _lastreadtime = currenttime;
 80a0206:	60a0      	str	r0, [r4, #8]

  // Reset 40 bits of received data to zero.
  data[0] = data[1] = data[2] = data[3] = data[4] = 0;
 80a0208:	7125      	strb	r5, [r4, #4]
  // Send start signal.  See DHT datasheet for full signal diagram:
  //   http://www.adafruit.com/datasheets/Digital%20humidity%20and%20temperature%20sensor%20AM2302.pdf

  // Go into high impedence state to let pull-up raise data line level and
  // start the reading process.
  digitalWrite(_pin, HIGH);
 80a020a:	7960      	ldrb	r0, [r4, #5]
    return _lastresult; // return last correct measurement
  }
  _lastreadtime = currenttime;

  // Reset 40 bits of received data to zero.
  data[0] = data[1] = data[2] = data[3] = data[4] = 0;
 80a020c:	70e5      	strb	r5, [r4, #3]
 80a020e:	70a5      	strb	r5, [r4, #2]
 80a0210:	7065      	strb	r5, [r4, #1]
 80a0212:	7025      	strb	r5, [r4, #0]
  // Send start signal.  See DHT datasheet for full signal diagram:
  //   http://www.adafruit.com/datasheets/Digital%20humidity%20and%20temperature%20sensor%20AM2302.pdf

  // Go into high impedence state to let pull-up raise data line level and
  // start the reading process.
  digitalWrite(_pin, HIGH);
 80a0214:	f000 fffb 	bl	80a120e <digitalWrite>
  delay(250);
 80a0218:	20fa      	movs	r0, #250	; 0xfa
 80a021a:	f000 fc27 	bl	80a0a6c <delay>

  // First set data line low for 20 milliseconds.
  pinMode(_pin, OUTPUT);
 80a021e:	2101      	movs	r1, #1
 80a0220:	7960      	ldrb	r0, [r4, #5]
 80a0222:	f000 ffe3 	bl	80a11ec <pinMode>
  digitalWrite(_pin, LOW);
 80a0226:	4629      	mov	r1, r5
 80a0228:	7960      	ldrb	r0, [r4, #5]
 80a022a:	f000 fff0 	bl	80a120e <digitalWrite>
  delay(20);
 80a022e:	2014      	movs	r0, #20
 80a0230:	f000 fc1c 	bl	80a0a6c <delay>
};

class InterruptLock {
  public:
   InterruptLock() {
    noInterrupts();
 80a0234:	f000 fe0c 	bl	80a0e50 <_Z12noInterruptsv>
    // Turn off interrupts temporarily because the next sections are timing critical
    // and we don't want any interruptions.
    InterruptLock lock;

    // End the start signal by setting data line high for 40 microseconds.
    digitalWrite(_pin, HIGH);
 80a0238:	2101      	movs	r1, #1
 80a023a:	7960      	ldrb	r0, [r4, #5]
 80a023c:	f000 ffe7 	bl	80a120e <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a0240:	2028      	movs	r0, #40	; 0x28
 80a0242:	f000 f92d 	bl	80a04a0 <HAL_Delay_Microseconds>
    delayMicroseconds(40);

    // Now start reading the data line to get the value from the DHT sensor.
    pinMode(_pin, INPUT_PULLUP);
 80a0246:	2102      	movs	r1, #2
 80a0248:	7960      	ldrb	r0, [r4, #5]
 80a024a:	f000 ffcf 	bl	80a11ec <pinMode>
 80a024e:	200a      	movs	r0, #10
 80a0250:	f000 f926 	bl	80a04a0 <HAL_Delay_Microseconds>
    delayMicroseconds(10);  // Delay a bit to let sensor pull data line low.

    // First expect a low signal for ~80 microseconds followed by a high signal
    // for ~80 microseconds again.
    if (expectPulse(LOW) == 0) {
 80a0254:	4629      	mov	r1, r5
 80a0256:	4620      	mov	r0, r4
 80a0258:	f7ff ffb2 	bl	80a01c0 <_ZN3DHT11expectPulseEb>
 80a025c:	b928      	cbnz	r0, 80a026a <_ZN3DHT4readEb+0x84>
      DEBUG_PRINTLN(F("Timeout waiting for start signal low pulse."));
      _lastresult = false;
 80a025e:	2500      	movs	r5, #0
 80a0260:	7425      	strb	r5, [r4, #16]
   }
   ~InterruptLock() {
    interrupts();
 80a0262:	f000 fdf7 	bl	80a0e54 <_Z10interruptsv>
 80a0266:	4628      	mov	r0, r5
 80a0268:	e03d      	b.n	80a02e6 <_ZN3DHT4readEb+0x100>
      return _lastresult;
    }
    if (expectPulse(HIGH) == 0) {
 80a026a:	2101      	movs	r1, #1
 80a026c:	4620      	mov	r0, r4
 80a026e:	f7ff ffa7 	bl	80a01c0 <_ZN3DHT11expectPulseEb>
 80a0272:	2800      	cmp	r0, #0
 80a0274:	d0f3      	beq.n	80a025e <_ZN3DHT4readEb+0x78>
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed all
    // the pulses are read into a array and then examined in a later step.
    for (int i=0; i<80; i+=2) {
      cycles[i]   = expectPulse(LOW);
 80a0276:	2100      	movs	r1, #0
 80a0278:	4620      	mov	r0, r4
 80a027a:	f7ff ffa1 	bl	80a01c0 <_ZN3DHT11expectPulseEb>
      cycles[i+1] = expectPulse(HIGH);
 80a027e:	2101      	movs	r1, #1
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed all
    // the pulses are read into a array and then examined in a later step.
    for (int i=0; i<80; i+=2) {
      cycles[i]   = expectPulse(LOW);
 80a0280:	f84d 0005 	str.w	r0, [sp, r5]
      cycles[i+1] = expectPulse(HIGH);
 80a0284:	4620      	mov	r0, r4
 80a0286:	f7ff ff9b 	bl	80a01c0 <_ZN3DHT11expectPulseEb>
 80a028a:	eb0d 0305 	add.w	r3, sp, r5
 80a028e:	3508      	adds	r5, #8
    // then it's a 1.  We measure the cycle count of the initial 50us low pulse
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed all
    // the pulses are read into a array and then examined in a later step.
    for (int i=0; i<80; i+=2) {
 80a0290:	f5b5 7fa0 	cmp.w	r5, #320	; 0x140
      cycles[i]   = expectPulse(LOW);
      cycles[i+1] = expectPulse(HIGH);
 80a0294:	6058      	str	r0, [r3, #4]
    // then it's a 1.  We measure the cycle count of the initial 50us low pulse
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed all
    // the pulses are read into a array and then examined in a later step.
    for (int i=0; i<80; i+=2) {
 80a0296:	d1ee      	bne.n	80a0276 <_ZN3DHT4readEb+0x90>
 80a0298:	f000 fddc 	bl	80a0e54 <_Z10interruptsv>
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i=0; i<40; ++i) {
 80a029c:	2200      	movs	r2, #0
    uint32_t lowCycles  = cycles[2*i];
 80a029e:	f85d 5032 	ldr.w	r5, [sp, r2, lsl #3]
    uint32_t highCycles = cycles[2*i+1];
 80a02a2:	eb0d 03c2 	add.w	r3, sp, r2, lsl #3
 80a02a6:	6858      	ldr	r0, [r3, #4]
    if ((lowCycles == 0) || (highCycles == 0)) {
 80a02a8:	b105      	cbz	r5, 80a02ac <_ZN3DHT4readEb+0xc6>
 80a02aa:	b908      	cbnz	r0, 80a02b0 <_ZN3DHT4readEb+0xca>
      DEBUG_PRINTLN(F("Timeout waiting for pulse."));
      _lastresult = false;
 80a02ac:	2000      	movs	r0, #0
 80a02ae:	e019      	b.n	80a02e4 <_ZN3DHT4readEb+0xfe>
      return _lastresult;
    }
    data[i/8] <<= 1;
 80a02b0:	10d1      	asrs	r1, r2, #3
 80a02b2:	5c63      	ldrb	r3, [r4, r1]
    // Now compare the low and high cycle times to see if the bit is a 0 or 1.
    if (highCycles > lowCycles) {
 80a02b4:	4285      	cmp	r5, r0
    if ((lowCycles == 0) || (highCycles == 0)) {
      DEBUG_PRINTLN(F("Timeout waiting for pulse."));
      _lastresult = false;
      return _lastresult;
    }
    data[i/8] <<= 1;
 80a02b6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a02ba:	b2db      	uxtb	r3, r3
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i=0; i<40; ++i) {
 80a02bc:	f102 0201 	add.w	r2, r2, #1
    }
    data[i/8] <<= 1;
    // Now compare the low and high cycle times to see if the bit is a 0 or 1.
    if (highCycles > lowCycles) {
      // High cycles are greater than 50us low cycle count, must be a 1.
      data[i/8] |= 1;
 80a02c0:	bf38      	it	cc
 80a02c2:	f043 0301 	orrcc.w	r3, r3, #1
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i=0; i<40; ++i) {
 80a02c6:	2a28      	cmp	r2, #40	; 0x28
    }
    data[i/8] <<= 1;
    // Now compare the low and high cycle times to see if the bit is a 0 or 1.
    if (highCycles > lowCycles) {
      // High cycles are greater than 50us low cycle count, must be a 1.
      data[i/8] |= 1;
 80a02c8:	5463      	strb	r3, [r4, r1]
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i=0; i<40; ++i) {
 80a02ca:	d1e8      	bne.n	80a029e <_ZN3DHT4readEb+0xb8>
  DEBUG_PRINT(data[3], HEX); DEBUG_PRINT(F(", "));
  DEBUG_PRINT(data[4], HEX); DEBUG_PRINT(F(" =? "));
  DEBUG_PRINTLN((data[0] + data[1] + data[2] + data[3]) & 0xFF, HEX);

  // Check we read 40 bits and that the checksum matches.
  if (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) {
 80a02cc:	7822      	ldrb	r2, [r4, #0]
 80a02ce:	7863      	ldrb	r3, [r4, #1]
 80a02d0:	7921      	ldrb	r1, [r4, #4]
 80a02d2:	4413      	add	r3, r2
 80a02d4:	78a2      	ldrb	r2, [r4, #2]
 80a02d6:	4413      	add	r3, r2
 80a02d8:	78e2      	ldrb	r2, [r4, #3]
 80a02da:	4413      	add	r3, r2
 80a02dc:	b2db      	uxtb	r3, r3
 80a02de:	4299      	cmp	r1, r3
 80a02e0:	d1e4      	bne.n	80a02ac <_ZN3DHT4readEb+0xc6>
    _lastresult = true;
 80a02e2:	2001      	movs	r0, #1
 80a02e4:	7420      	strb	r0, [r4, #16]
  else {
    DEBUG_PRINTLN(F("Checksum failure!"));
    _lastresult = false;
    return _lastresult;
  }
}
 80a02e6:	b051      	add	sp, #324	; 0x144
 80a02e8:	bd30      	pop	{r4, r5, pc}
 80a02ea:	0000      	movs	r0, r0
 80a02ec:	0000      	movs	r0, r0
	...

080a02f0 <_ZN3DHT15readTemperatureEbb>:
  _lastreadtime = -MIN_INTERVAL;
  DEBUG_PRINT("Max clock cycles: "); DEBUG_PRINTLN(_maxcycles, DEC);
}

//boolean S == Scale.  True == Fahrenheit; False == Celcius
float DHT::readTemperature(bool S, bool force) {
 80a02f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a02f2:	460d      	mov	r5, r1
  float f = NAN;

  if (read(force)) {
 80a02f4:	4611      	mov	r1, r2
  _lastreadtime = -MIN_INTERVAL;
  DEBUG_PRINT("Max clock cycles: "); DEBUG_PRINTLN(_maxcycles, DEC);
}

//boolean S == Scale.  True == Fahrenheit; False == Celcius
float DHT::readTemperature(bool S, bool force) {
 80a02f6:	4604      	mov	r4, r0
  float f = NAN;

  if (read(force)) {
 80a02f8:	f7ff ff75 	bl	80a01e6 <_ZN3DHT4readEb>
 80a02fc:	2800      	cmp	r0, #0
 80a02fe:	d03c      	beq.n	80a037a <_ZN3DHT15readTemperatureEbb+0x8a>
    switch (_type) {
 80a0300:	79a3      	ldrb	r3, [r4, #6]
 80a0302:	2b0b      	cmp	r3, #11
 80a0304:	d004      	beq.n	80a0310 <_ZN3DHT15readTemperatureEbb+0x20>
 80a0306:	d338      	bcc.n	80a037a <_ZN3DHT15readTemperatureEbb+0x8a>
 80a0308:	3b15      	subs	r3, #21
 80a030a:	2b01      	cmp	r3, #1
 80a030c:	d906      	bls.n	80a031c <_ZN3DHT15readTemperatureEbb+0x2c>
 80a030e:	e034      	b.n	80a037a <_ZN3DHT15readTemperatureEbb+0x8a>
    case DHT11:
      f = data[2];
 80a0310:	78a0      	ldrb	r0, [r4, #2]
 80a0312:	f001 ff21 	bl	80a2158 <__aeabi_ui2f>
 80a0316:	4603      	mov	r3, r0
      if(S) {
 80a0318:	b385      	cbz	r5, 80a037c <_ZN3DHT15readTemperatureEbb+0x8c>
 80a031a:	e01f      	b.n	80a035c <_ZN3DHT15readTemperatureEbb+0x6c>
        f = convertCtoF(f);
      }
      break;
    case DHT22:
    case DHT21:
      f = data[2] & 0x7F;
 80a031c:	78a6      	ldrb	r6, [r4, #2]
 80a031e:	f006 007f 	and.w	r0, r6, #127	; 0x7f
 80a0322:	f001 ff1d 	bl	80a2160 <__aeabi_i2f>
      f *= 256;
 80a0326:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80a032a:	f001 ff6d 	bl	80a2208 <__aeabi_fmul>
 80a032e:	4607      	mov	r7, r0
      f += data[3];
      f *= 0.1;
 80a0330:	78e0      	ldrb	r0, [r4, #3]
 80a0332:	f001 ff15 	bl	80a2160 <__aeabi_i2f>
 80a0336:	4639      	mov	r1, r7
 80a0338:	f001 fe5e 	bl	80a1ff8 <__addsf3>
 80a033c:	f001 faba 	bl	80a18b4 <__aeabi_f2d>
 80a0340:	a30f      	add	r3, pc, #60	; (adr r3, 80a0380 <_ZN3DHT15readTemperatureEbb+0x90>)
 80a0342:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0346:	f001 fb09 	bl	80a195c <__aeabi_dmul>
 80a034a:	f001 fdff 	bl	80a1f4c <__aeabi_d2f>
      if (data[2] & 0x80) {
 80a034e:	0632      	lsls	r2, r6, #24
    case DHT22:
    case DHT21:
      f = data[2] & 0x7F;
      f *= 256;
      f += data[3];
      f *= 0.1;
 80a0350:	4603      	mov	r3, r0
      if (data[2] & 0x80) {
        f *= -1;
 80a0352:	bf48      	it	mi
 80a0354:	f100 4300 	addmi.w	r3, r0, #2147483648	; 0x80000000
      }
      if(S) {
 80a0358:	b185      	cbz	r5, 80a037c <_ZN3DHT15readTemperatureEbb+0x8c>
  }
  return f;
}

float DHT::convertCtoF(float c) {
  return c * 1.8 + 32;
 80a035a:	4618      	mov	r0, r3
 80a035c:	f001 faaa 	bl	80a18b4 <__aeabi_f2d>
 80a0360:	a309      	add	r3, pc, #36	; (adr r3, 80a0388 <_ZN3DHT15readTemperatureEbb+0x98>)
 80a0362:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0366:	f001 faf9 	bl	80a195c <__aeabi_dmul>
 80a036a:	4b09      	ldr	r3, [pc, #36]	; (80a0390 <_ZN3DHT15readTemperatureEbb+0xa0>)
 80a036c:	2200      	movs	r2, #0
 80a036e:	f001 f943 	bl	80a15f8 <__adddf3>
 80a0372:	f001 fdeb 	bl	80a1f4c <__aeabi_d2f>
 80a0376:	4603      	mov	r3, r0
 80a0378:	e000      	b.n	80a037c <_ZN3DHT15readTemperatureEbb+0x8c>
  DEBUG_PRINT("Max clock cycles: "); DEBUG_PRINTLN(_maxcycles, DEC);
}

//boolean S == Scale.  True == Fahrenheit; False == Celcius
float DHT::readTemperature(bool S, bool force) {
  float f = NAN;
 80a037a:	4b06      	ldr	r3, [pc, #24]	; (80a0394 <_ZN3DHT15readTemperatureEbb+0xa4>)
      }
      break;
    }
  }
  return f;
}
 80a037c:	4618      	mov	r0, r3
 80a037e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a0380:	9999999a 	.word	0x9999999a
 80a0384:	3fb99999 	.word	0x3fb99999
 80a0388:	cccccccd 	.word	0xcccccccd
 80a038c:	3ffccccc 	.word	0x3ffccccc
 80a0390:	40400000 	.word	0x40400000
 80a0394:	7fc00000 	.word	0x7fc00000

080a0398 <_ZN3DHT12readHumidityEb>:

float DHT::convertFtoC(float f) {
  return (f - 32) * 0.55555;
}

float DHT::readHumidity(bool force) {
 80a0398:	b538      	push	{r3, r4, r5, lr}
  float f = NAN;
  if (read()) {
 80a039a:	2100      	movs	r1, #0

float DHT::convertFtoC(float f) {
  return (f - 32) * 0.55555;
}

float DHT::readHumidity(bool force) {
 80a039c:	4604      	mov	r4, r0
  float f = NAN;
  if (read()) {
 80a039e:	f7ff ff22 	bl	80a01e6 <_ZN3DHT4readEb>
 80a03a2:	b310      	cbz	r0, 80a03ea <_ZN3DHT12readHumidityEb+0x52>
    switch (_type) {
 80a03a4:	79a3      	ldrb	r3, [r4, #6]
 80a03a6:	2b0b      	cmp	r3, #11
 80a03a8:	d01b      	beq.n	80a03e2 <_ZN3DHT12readHumidityEb+0x4a>
 80a03aa:	d31e      	bcc.n	80a03ea <_ZN3DHT12readHumidityEb+0x52>
 80a03ac:	3b15      	subs	r3, #21
 80a03ae:	2b01      	cmp	r3, #1
 80a03b0:	d81b      	bhi.n	80a03ea <_ZN3DHT12readHumidityEb+0x52>
    case DHT11:
      f = data[0];
      break;
    case DHT22:
    case DHT21:
      f = data[0];
 80a03b2:	7820      	ldrb	r0, [r4, #0]
 80a03b4:	f001 fed0 	bl	80a2158 <__aeabi_ui2f>
      f *= 256;
 80a03b8:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80a03bc:	f001 ff24 	bl	80a2208 <__aeabi_fmul>
 80a03c0:	4605      	mov	r5, r0
      f += data[1];
      f *= 0.1;
 80a03c2:	7860      	ldrb	r0, [r4, #1]
 80a03c4:	f001 fecc 	bl	80a2160 <__aeabi_i2f>
 80a03c8:	4629      	mov	r1, r5
 80a03ca:	f001 fe15 	bl	80a1ff8 <__addsf3>
 80a03ce:	f001 fa71 	bl	80a18b4 <__aeabi_f2d>
 80a03d2:	a307      	add	r3, pc, #28	; (adr r3, 80a03f0 <_ZN3DHT12readHumidityEb+0x58>)
 80a03d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a03d8:	f001 fac0 	bl	80a195c <__aeabi_dmul>
 80a03dc:	f001 fdb6 	bl	80a1f4c <__aeabi_d2f>
      break;
 80a03e0:	bd38      	pop	{r3, r4, r5, pc}
float DHT::readHumidity(bool force) {
  float f = NAN;
  if (read()) {
    switch (_type) {
    case DHT11:
      f = data[0];
 80a03e2:	7820      	ldrb	r0, [r4, #0]
 80a03e4:	f001 feb8 	bl	80a2158 <__aeabi_ui2f>
      break;
 80a03e8:	bd38      	pop	{r3, r4, r5, pc}
float DHT::convertFtoC(float f) {
  return (f - 32) * 0.55555;
}

float DHT::readHumidity(bool force) {
  float f = NAN;
 80a03ea:	4803      	ldr	r0, [pc, #12]	; (80a03f8 <_ZN3DHT12readHumidityEb+0x60>)
      f *= 0.1;
      break;
    }
  }
  return f;
}
 80a03ec:	bd38      	pop	{r3, r4, r5, pc}
 80a03ee:	bf00      	nop
 80a03f0:	9999999a 	.word	0x9999999a
 80a03f4:	3fb99999 	.word	0x3fb99999
 80a03f8:	7fc00000 	.word	0x7fc00000

080a03fc <_GLOBAL__sub_I__ZN3DHTC2Ehhh>:
 80a03fc:	f000 b800 	b.w	80a0400 <HAL_Pin_Map>

080a0400 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a0400:	b508      	push	{r3, lr}
 80a0402:	4b02      	ldr	r3, [pc, #8]	; (80a040c <HAL_Pin_Map+0xc>)
 80a0404:	681b      	ldr	r3, [r3, #0]
 80a0406:	681b      	ldr	r3, [r3, #0]
 80a0408:	9301      	str	r3, [sp, #4]
 80a040a:	bd08      	pop	{r3, pc}
 80a040c:	080601b0 	.word	0x080601b0

080a0410 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0410:	b508      	push	{r3, lr}
 80a0412:	4b02      	ldr	r3, [pc, #8]	; (80a041c <HAL_Pin_Mode+0xc>)
 80a0414:	681b      	ldr	r3, [r3, #0]
 80a0416:	689b      	ldr	r3, [r3, #8]
 80a0418:	9301      	str	r3, [sp, #4]
 80a041a:	bd08      	pop	{r3, pc}
 80a041c:	080601b0 	.word	0x080601b0

080a0420 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a0420:	b508      	push	{r3, lr}
 80a0422:	4b02      	ldr	r3, [pc, #8]	; (80a042c <HAL_Get_Pin_Mode+0xc>)
 80a0424:	681b      	ldr	r3, [r3, #0]
 80a0426:	68db      	ldr	r3, [r3, #12]
 80a0428:	9301      	str	r3, [sp, #4]
 80a042a:	bd08      	pop	{r3, pc}
 80a042c:	080601b0 	.word	0x080601b0

080a0430 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a0430:	b508      	push	{r3, lr}
 80a0432:	4b02      	ldr	r3, [pc, #8]	; (80a043c <HAL_GPIO_Write+0xc>)
 80a0434:	681b      	ldr	r3, [r3, #0]
 80a0436:	691b      	ldr	r3, [r3, #16]
 80a0438:	9301      	str	r3, [sp, #4]
 80a043a:	bd08      	pop	{r3, pc}
 80a043c:	080601b0 	.word	0x080601b0

080a0440 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a0440:	b508      	push	{r3, lr}
 80a0442:	4b02      	ldr	r3, [pc, #8]	; (80a044c <HAL_GPIO_Read+0xc>)
 80a0444:	681b      	ldr	r3, [r3, #0]
 80a0446:	695b      	ldr	r3, [r3, #20]
 80a0448:	9301      	str	r3, [sp, #4]
 80a044a:	bd08      	pop	{r3, pc}
 80a044c:	080601b0 	.word	0x080601b0

080a0450 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
 80a0450:	b508      	push	{r3, lr}
 80a0452:	4b02      	ldr	r3, [pc, #8]	; (80a045c <HAL_Interrupts_Enable_All+0xc>)
 80a0454:	681b      	ldr	r3, [r3, #0]
 80a0456:	6a1b      	ldr	r3, [r3, #32]
 80a0458:	9301      	str	r3, [sp, #4]
 80a045a:	bd08      	pop	{r3, pc}
 80a045c:	080601b0 	.word	0x080601b0

080a0460 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
 80a0460:	b508      	push	{r3, lr}
 80a0462:	4b02      	ldr	r3, [pc, #8]	; (80a046c <HAL_Interrupts_Disable_All+0xc>)
 80a0464:	681b      	ldr	r3, [r3, #0]
 80a0466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0468:	9301      	str	r3, [sp, #4]
 80a046a:	bd08      	pop	{r3, pc}
 80a046c:	080601b0 	.word	0x080601b0

080a0470 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a0470:	b508      	push	{r3, lr}
 80a0472:	4b02      	ldr	r3, [pc, #8]	; (80a047c <HAL_SPI_Init+0xc>)
 80a0474:	681b      	ldr	r3, [r3, #0]
 80a0476:	69db      	ldr	r3, [r3, #28]
 80a0478:	9301      	str	r3, [sp, #4]
 80a047a:	bd08      	pop	{r3, pc}
 80a047c:	080601b4 	.word	0x080601b4

080a0480 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a0480:	b508      	push	{r3, lr}
 80a0482:	4b02      	ldr	r3, [pc, #8]	; (80a048c <HAL_SPI_Is_Enabled+0xc>)
 80a0484:	681b      	ldr	r3, [r3, #0]
 80a0486:	6a1b      	ldr	r3, [r3, #32]
 80a0488:	9301      	str	r3, [sp, #4]
 80a048a:	bd08      	pop	{r3, pc}
 80a048c:	080601b4 	.word	0x080601b4

080a0490 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0490:	b508      	push	{r3, lr}
 80a0492:	4b02      	ldr	r3, [pc, #8]	; (80a049c <HAL_RNG_GetRandomNumber+0xc>)
 80a0494:	681b      	ldr	r3, [r3, #0]
 80a0496:	685b      	ldr	r3, [r3, #4]
 80a0498:	9301      	str	r3, [sp, #4]
 80a049a:	bd08      	pop	{r3, pc}
 80a049c:	0806019c 	.word	0x0806019c

080a04a0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a04a0:	b508      	push	{r3, lr}
 80a04a2:	4b02      	ldr	r3, [pc, #8]	; (80a04ac <HAL_Delay_Microseconds+0xc>)
 80a04a4:	681b      	ldr	r3, [r3, #0]
 80a04a6:	68db      	ldr	r3, [r3, #12]
 80a04a8:	9301      	str	r3, [sp, #4]
 80a04aa:	bd08      	pop	{r3, pc}
 80a04ac:	0806019c 	.word	0x0806019c

080a04b0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a04b0:	b508      	push	{r3, lr}
 80a04b2:	4b02      	ldr	r3, [pc, #8]	; (80a04bc <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a04b4:	681b      	ldr	r3, [r3, #0]
 80a04b6:	695b      	ldr	r3, [r3, #20]
 80a04b8:	9301      	str	r3, [sp, #4]
 80a04ba:	bd08      	pop	{r3, pc}
 80a04bc:	0806019c 	.word	0x0806019c

080a04c0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a04c0:	b508      	push	{r3, lr}
 80a04c2:	4b02      	ldr	r3, [pc, #8]	; (80a04cc <os_mutex_recursive_create+0xc>)
 80a04c4:	681b      	ldr	r3, [r3, #0]
 80a04c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a04c8:	9301      	str	r3, [sp, #4]
 80a04ca:	bd08      	pop	{r3, pc}
 80a04cc:	080601d0 	.word	0x080601d0

080a04d0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a04d0:	b508      	push	{r3, lr}
 80a04d2:	4b02      	ldr	r3, [pc, #8]	; (80a04dc <os_mutex_recursive_destroy+0xc>)
 80a04d4:	681b      	ldr	r3, [r3, #0]
 80a04d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a04d8:	9301      	str	r3, [sp, #4]
 80a04da:	bd08      	pop	{r3, pc}
 80a04dc:	080601d0 	.word	0x080601d0

080a04e0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a04e0:	b508      	push	{r3, lr}
 80a04e2:	4b02      	ldr	r3, [pc, #8]	; (80a04ec <HAL_USART_Init+0xc>)
 80a04e4:	681b      	ldr	r3, [r3, #0]
 80a04e6:	699b      	ldr	r3, [r3, #24]
 80a04e8:	9301      	str	r3, [sp, #4]
 80a04ea:	bd08      	pop	{r3, pc}
 80a04ec:	080601c4 	.word	0x080601c4

080a04f0 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a04f0:	b508      	push	{r3, lr}
 80a04f2:	4b02      	ldr	r3, [pc, #8]	; (80a04fc <HAL_USART_Write_Data+0xc>)
 80a04f4:	681b      	ldr	r3, [r3, #0]
 80a04f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a04f8:	9301      	str	r3, [sp, #4]
 80a04fa:	bd08      	pop	{r3, pc}
 80a04fc:	080601c4 	.word	0x080601c4

080a0500 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0500:	b508      	push	{r3, lr}
 80a0502:	4b02      	ldr	r3, [pc, #8]	; (80a050c <HAL_USART_Available_Data+0xc>)
 80a0504:	681b      	ldr	r3, [r3, #0]
 80a0506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0508:	9301      	str	r3, [sp, #4]
 80a050a:	bd08      	pop	{r3, pc}
 80a050c:	080601c4 	.word	0x080601c4

080a0510 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0510:	b508      	push	{r3, lr}
 80a0512:	4b02      	ldr	r3, [pc, #8]	; (80a051c <HAL_USART_Read_Data+0xc>)
 80a0514:	681b      	ldr	r3, [r3, #0]
 80a0516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0518:	9301      	str	r3, [sp, #4]
 80a051a:	bd08      	pop	{r3, pc}
 80a051c:	080601c4 	.word	0x080601c4

080a0520 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0520:	b508      	push	{r3, lr}
 80a0522:	4b02      	ldr	r3, [pc, #8]	; (80a052c <HAL_USART_Peek_Data+0xc>)
 80a0524:	681b      	ldr	r3, [r3, #0]
 80a0526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0528:	9301      	str	r3, [sp, #4]
 80a052a:	bd08      	pop	{r3, pc}
 80a052c:	080601c4 	.word	0x080601c4

080a0530 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0530:	b508      	push	{r3, lr}
 80a0532:	4b02      	ldr	r3, [pc, #8]	; (80a053c <HAL_USART_Flush_Data+0xc>)
 80a0534:	681b      	ldr	r3, [r3, #0]
 80a0536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0538:	9301      	str	r3, [sp, #4]
 80a053a:	bd08      	pop	{r3, pc}
 80a053c:	080601c4 	.word	0x080601c4

080a0540 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a0540:	b508      	push	{r3, lr}
 80a0542:	4b02      	ldr	r3, [pc, #8]	; (80a054c <HAL_USART_Is_Enabled+0xc>)
 80a0544:	681b      	ldr	r3, [r3, #0]
 80a0546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0548:	9301      	str	r3, [sp, #4]
 80a054a:	bd08      	pop	{r3, pc}
 80a054c:	080601c4 	.word	0x080601c4

080a0550 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0550:	b508      	push	{r3, lr}
 80a0552:	4b02      	ldr	r3, [pc, #8]	; (80a055c <HAL_USART_Available_Data_For_Write+0xc>)
 80a0554:	681b      	ldr	r3, [r3, #0]
 80a0556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0558:	9301      	str	r3, [sp, #4]
 80a055a:	bd08      	pop	{r3, pc}
 80a055c:	080601c4 	.word	0x080601c4

080a0560 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a0560:	b508      	push	{r3, lr}
 80a0562:	4b02      	ldr	r3, [pc, #8]	; (80a056c <HAL_I2C_Write_Data+0xc>)
 80a0564:	681b      	ldr	r3, [r3, #0]
 80a0566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0568:	9301      	str	r3, [sp, #4]
 80a056a:	bd08      	pop	{r3, pc}
 80a056c:	080601ac 	.word	0x080601ac

080a0570 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a0570:	b508      	push	{r3, lr}
 80a0572:	4b02      	ldr	r3, [pc, #8]	; (80a057c <HAL_I2C_Available_Data+0xc>)
 80a0574:	681b      	ldr	r3, [r3, #0]
 80a0576:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0578:	9301      	str	r3, [sp, #4]
 80a057a:	bd08      	pop	{r3, pc}
 80a057c:	080601ac 	.word	0x080601ac

080a0580 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a0580:	b508      	push	{r3, lr}
 80a0582:	4b02      	ldr	r3, [pc, #8]	; (80a058c <HAL_I2C_Read_Data+0xc>)
 80a0584:	681b      	ldr	r3, [r3, #0]
 80a0586:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0588:	9301      	str	r3, [sp, #4]
 80a058a:	bd08      	pop	{r3, pc}
 80a058c:	080601ac 	.word	0x080601ac

080a0590 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a0590:	b508      	push	{r3, lr}
 80a0592:	4b02      	ldr	r3, [pc, #8]	; (80a059c <HAL_I2C_Peek_Data+0xc>)
 80a0594:	681b      	ldr	r3, [r3, #0]
 80a0596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0598:	9301      	str	r3, [sp, #4]
 80a059a:	bd08      	pop	{r3, pc}
 80a059c:	080601ac 	.word	0x080601ac

080a05a0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a05a0:	b508      	push	{r3, lr}
 80a05a2:	4b02      	ldr	r3, [pc, #8]	; (80a05ac <HAL_I2C_Flush_Data+0xc>)
 80a05a4:	681b      	ldr	r3, [r3, #0]
 80a05a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a05a8:	9301      	str	r3, [sp, #4]
 80a05aa:	bd08      	pop	{r3, pc}
 80a05ac:	080601ac 	.word	0x080601ac

080a05b0 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a05b0:	b508      	push	{r3, lr}
 80a05b2:	4b02      	ldr	r3, [pc, #8]	; (80a05bc <HAL_I2C_Is_Enabled+0xc>)
 80a05b4:	681b      	ldr	r3, [r3, #0]
 80a05b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a05b8:	9301      	str	r3, [sp, #4]
 80a05ba:	bd08      	pop	{r3, pc}
 80a05bc:	080601ac 	.word	0x080601ac

080a05c0 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
 80a05c0:	b508      	push	{r3, lr}
 80a05c2:	4b03      	ldr	r3, [pc, #12]	; (80a05d0 <HAL_I2C_Init+0x10>)
 80a05c4:	681b      	ldr	r3, [r3, #0]
 80a05c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a05ca:	9301      	str	r3, [sp, #4]
 80a05cc:	bd08      	pop	{r3, pc}
 80a05ce:	0000      	.short	0x0000
 80a05d0:	080601ac 	.word	0x080601ac

080a05d4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a05d4:	b508      	push	{r3, lr}
 80a05d6:	4b02      	ldr	r3, [pc, #8]	; (80a05e0 <HAL_USB_USART_Init+0xc>)
 80a05d8:	681b      	ldr	r3, [r3, #0]
 80a05da:	681b      	ldr	r3, [r3, #0]
 80a05dc:	9301      	str	r3, [sp, #4]
 80a05de:	bd08      	pop	{r3, pc}
 80a05e0:	080601d8 	.word	0x080601d8

080a05e4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a05e4:	b508      	push	{r3, lr}
 80a05e6:	4b02      	ldr	r3, [pc, #8]	; (80a05f0 <HAL_USB_USART_Begin+0xc>)
 80a05e8:	681b      	ldr	r3, [r3, #0]
 80a05ea:	685b      	ldr	r3, [r3, #4]
 80a05ec:	9301      	str	r3, [sp, #4]
 80a05ee:	bd08      	pop	{r3, pc}
 80a05f0:	080601d8 	.word	0x080601d8

080a05f4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a05f4:	b508      	push	{r3, lr}
 80a05f6:	4b02      	ldr	r3, [pc, #8]	; (80a0600 <HAL_USB_USART_Available_Data+0xc>)
 80a05f8:	681b      	ldr	r3, [r3, #0]
 80a05fa:	691b      	ldr	r3, [r3, #16]
 80a05fc:	9301      	str	r3, [sp, #4]
 80a05fe:	bd08      	pop	{r3, pc}
 80a0600:	080601d8 	.word	0x080601d8

080a0604 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0604:	b508      	push	{r3, lr}
 80a0606:	4b02      	ldr	r3, [pc, #8]	; (80a0610 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0608:	681b      	ldr	r3, [r3, #0]
 80a060a:	695b      	ldr	r3, [r3, #20]
 80a060c:	9301      	str	r3, [sp, #4]
 80a060e:	bd08      	pop	{r3, pc}
 80a0610:	080601d8 	.word	0x080601d8

080a0614 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0614:	b508      	push	{r3, lr}
 80a0616:	4b02      	ldr	r3, [pc, #8]	; (80a0620 <HAL_USB_USART_Receive_Data+0xc>)
 80a0618:	681b      	ldr	r3, [r3, #0]
 80a061a:	699b      	ldr	r3, [r3, #24]
 80a061c:	9301      	str	r3, [sp, #4]
 80a061e:	bd08      	pop	{r3, pc}
 80a0620:	080601d8 	.word	0x080601d8

080a0624 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0624:	b508      	push	{r3, lr}
 80a0626:	4b02      	ldr	r3, [pc, #8]	; (80a0630 <HAL_USB_USART_Send_Data+0xc>)
 80a0628:	681b      	ldr	r3, [r3, #0]
 80a062a:	69db      	ldr	r3, [r3, #28]
 80a062c:	9301      	str	r3, [sp, #4]
 80a062e:	bd08      	pop	{r3, pc}
 80a0630:	080601d8 	.word	0x080601d8

080a0634 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0634:	b508      	push	{r3, lr}
 80a0636:	4b02      	ldr	r3, [pc, #8]	; (80a0640 <HAL_USB_USART_Flush_Data+0xc>)
 80a0638:	681b      	ldr	r3, [r3, #0]
 80a063a:	6a1b      	ldr	r3, [r3, #32]
 80a063c:	9301      	str	r3, [sp, #4]
 80a063e:	bd08      	pop	{r3, pc}
 80a0640:	080601d8 	.word	0x080601d8

080a0644 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0644:	b508      	push	{r3, lr}
 80a0646:	4b02      	ldr	r3, [pc, #8]	; (80a0650 <inet_gethostbyname+0xc>)
 80a0648:	681b      	ldr	r3, [r3, #0]
 80a064a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a064c:	9301      	str	r3, [sp, #4]
 80a064e:	bd08      	pop	{r3, pc}
 80a0650:	080601c0 	.word	0x080601c0

080a0654 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0654:	b508      	push	{r3, lr}
 80a0656:	4b02      	ldr	r3, [pc, #8]	; (80a0660 <set_system_mode+0xc>)
 80a0658:	681b      	ldr	r3, [r3, #0]
 80a065a:	685b      	ldr	r3, [r3, #4]
 80a065c:	9301      	str	r3, [sp, #4]
 80a065e:	bd08      	pop	{r3, pc}
 80a0660:	080601a4 	.word	0x080601a4

080a0664 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0664:	b508      	push	{r3, lr}
 80a0666:	4b02      	ldr	r3, [pc, #8]	; (80a0670 <system_delay_ms+0xc>)
 80a0668:	681b      	ldr	r3, [r3, #0]
 80a066a:	695b      	ldr	r3, [r3, #20]
 80a066c:	9301      	str	r3, [sp, #4]
 80a066e:	bd08      	pop	{r3, pc}
 80a0670:	080601a4 	.word	0x080601a4

080a0674 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0674:	b508      	push	{r3, lr}
 80a0676:	4b03      	ldr	r3, [pc, #12]	; (80a0684 <system_ctrl_set_app_request_handler+0x10>)
 80a0678:	681b      	ldr	r3, [r3, #0]
 80a067a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a067e:	9301      	str	r3, [sp, #4]
 80a0680:	bd08      	pop	{r3, pc}
 80a0682:	0000      	.short	0x0000
 80a0684:	080601a4 	.word	0x080601a4

080a0688 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0688:	b508      	push	{r3, lr}
 80a068a:	4b03      	ldr	r3, [pc, #12]	; (80a0698 <system_ctrl_set_result+0x10>)
 80a068c:	681b      	ldr	r3, [r3, #0]
 80a068e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0692:	9301      	str	r3, [sp, #4]
 80a0694:	bd08      	pop	{r3, pc}
 80a0696:	0000      	.short	0x0000
 80a0698:	080601a4 	.word	0x080601a4

080a069c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a069c:	b508      	push	{r3, lr}
 80a069e:	4b02      	ldr	r3, [pc, #8]	; (80a06a8 <network_connect+0xc>)
 80a06a0:	681b      	ldr	r3, [r3, #0]
 80a06a2:	685b      	ldr	r3, [r3, #4]
 80a06a4:	9301      	str	r3, [sp, #4]
 80a06a6:	bd08      	pop	{r3, pc}
 80a06a8:	080601c8 	.word	0x080601c8

080a06ac <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a06ac:	b508      	push	{r3, lr}
 80a06ae:	4b02      	ldr	r3, [pc, #8]	; (80a06b8 <network_connecting+0xc>)
 80a06b0:	681b      	ldr	r3, [r3, #0]
 80a06b2:	689b      	ldr	r3, [r3, #8]
 80a06b4:	9301      	str	r3, [sp, #4]
 80a06b6:	bd08      	pop	{r3, pc}
 80a06b8:	080601c8 	.word	0x080601c8

080a06bc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a06bc:	b508      	push	{r3, lr}
 80a06be:	4b02      	ldr	r3, [pc, #8]	; (80a06c8 <network_disconnect+0xc>)
 80a06c0:	681b      	ldr	r3, [r3, #0]
 80a06c2:	68db      	ldr	r3, [r3, #12]
 80a06c4:	9301      	str	r3, [sp, #4]
 80a06c6:	bd08      	pop	{r3, pc}
 80a06c8:	080601c8 	.word	0x080601c8

080a06cc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a06cc:	b508      	push	{r3, lr}
 80a06ce:	4b02      	ldr	r3, [pc, #8]	; (80a06d8 <network_ready+0xc>)
 80a06d0:	681b      	ldr	r3, [r3, #0]
 80a06d2:	691b      	ldr	r3, [r3, #16]
 80a06d4:	9301      	str	r3, [sp, #4]
 80a06d6:	bd08      	pop	{r3, pc}
 80a06d8:	080601c8 	.word	0x080601c8

080a06dc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a06dc:	b508      	push	{r3, lr}
 80a06de:	4b02      	ldr	r3, [pc, #8]	; (80a06e8 <network_on+0xc>)
 80a06e0:	681b      	ldr	r3, [r3, #0]
 80a06e2:	695b      	ldr	r3, [r3, #20]
 80a06e4:	9301      	str	r3, [sp, #4]
 80a06e6:	bd08      	pop	{r3, pc}
 80a06e8:	080601c8 	.word	0x080601c8

080a06ec <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a06ec:	b508      	push	{r3, lr}
 80a06ee:	4b02      	ldr	r3, [pc, #8]	; (80a06f8 <network_off+0xc>)
 80a06f0:	681b      	ldr	r3, [r3, #0]
 80a06f2:	699b      	ldr	r3, [r3, #24]
 80a06f4:	9301      	str	r3, [sp, #4]
 80a06f6:	bd08      	pop	{r3, pc}
 80a06f8:	080601c8 	.word	0x080601c8

080a06fc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a06fc:	b508      	push	{r3, lr}
 80a06fe:	4b02      	ldr	r3, [pc, #8]	; (80a0708 <network_listen+0xc>)
 80a0700:	681b      	ldr	r3, [r3, #0]
 80a0702:	69db      	ldr	r3, [r3, #28]
 80a0704:	9301      	str	r3, [sp, #4]
 80a0706:	bd08      	pop	{r3, pc}
 80a0708:	080601c8 	.word	0x080601c8

080a070c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a070c:	b508      	push	{r3, lr}
 80a070e:	4b02      	ldr	r3, [pc, #8]	; (80a0718 <network_listening+0xc>)
 80a0710:	681b      	ldr	r3, [r3, #0]
 80a0712:	6a1b      	ldr	r3, [r3, #32]
 80a0714:	9301      	str	r3, [sp, #4]
 80a0716:	bd08      	pop	{r3, pc}
 80a0718:	080601c8 	.word	0x080601c8

080a071c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a071c:	b508      	push	{r3, lr}
 80a071e:	4b02      	ldr	r3, [pc, #8]	; (80a0728 <network_set_listen_timeout+0xc>)
 80a0720:	681b      	ldr	r3, [r3, #0]
 80a0722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0724:	9301      	str	r3, [sp, #4]
 80a0726:	bd08      	pop	{r3, pc}
 80a0728:	080601c8 	.word	0x080601c8

080a072c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a072c:	b508      	push	{r3, lr}
 80a072e:	4b02      	ldr	r3, [pc, #8]	; (80a0738 <network_get_listen_timeout+0xc>)
 80a0730:	681b      	ldr	r3, [r3, #0]
 80a0732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0734:	9301      	str	r3, [sp, #4]
 80a0736:	bd08      	pop	{r3, pc}
 80a0738:	080601c8 	.word	0x080601c8

080a073c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a073c:	b508      	push	{r3, lr}
 80a073e:	4b02      	ldr	r3, [pc, #8]	; (80a0748 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0740:	681b      	ldr	r3, [r3, #0]
 80a0742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0744:	9301      	str	r3, [sp, #4]
 80a0746:	bd08      	pop	{r3, pc}
 80a0748:	080601cc 	.word	0x080601cc

080a074c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a074c:	b508      	push	{r3, lr}
 80a074e:	4b02      	ldr	r3, [pc, #8]	; (80a0758 <malloc+0xc>)
 80a0750:	681b      	ldr	r3, [r3, #0]
 80a0752:	681b      	ldr	r3, [r3, #0]
 80a0754:	9301      	str	r3, [sp, #4]
 80a0756:	bd08      	pop	{r3, pc}
 80a0758:	080601a0 	.word	0x080601a0

080a075c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a075c:	b508      	push	{r3, lr}
 80a075e:	4b02      	ldr	r3, [pc, #8]	; (80a0768 <free+0xc>)
 80a0760:	681b      	ldr	r3, [r3, #0]
 80a0762:	685b      	ldr	r3, [r3, #4]
 80a0764:	9301      	str	r3, [sp, #4]
 80a0766:	bd08      	pop	{r3, pc}
 80a0768:	080601a0 	.word	0x080601a0

080a076c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a076c:	b570      	push	{r4, r5, r6, lr}
 80a076e:	4604      	mov	r4, r0
 80a0770:	460e      	mov	r6, r1
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a0772:	2500      	movs	r5, #0
 80a0774:	f840 5f08 	str.w	r5, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a0778:	f7ff fea2 	bl	80a04c0 <os_mutex_recursive_create>
{
    _spi = spi;
    HAL_SPI_Init(_spi);
 80a077c:	4630      	mov	r0, r6
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
    _spi = spi;
 80a077e:	7026      	strb	r6, [r4, #0]
    HAL_SPI_Init(_spi);
 80a0780:	f7ff fe76 	bl	80a0470 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a0784:	6065      	str	r5, [r4, #4]
}
 80a0786:	4620      	mov	r0, r4
 80a0788:	bd70      	pop	{r4, r5, r6, pc}

080a078a <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
 80a078a:	7800      	ldrb	r0, [r0, #0]
 80a078c:	f7ff be78 	b.w	80a0480 <HAL_SPI_Is_Enabled>

080a0790 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a0790:	b510      	push	{r4, lr}
 80a0792:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a0794:	6800      	ldr	r0, [r0, #0]
 80a0796:	b118      	cbz	r0, 80a07a0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
 80a0798:	f7ff ffe0 	bl	80a075c <free>
            wakeupSource_ = nullptr;
 80a079c:	2300      	movs	r3, #0
 80a079e:	6023      	str	r3, [r4, #0]
 80a07a0:	bd10      	pop	{r4, pc}

080a07a2 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a07a2:	b510      	push	{r4, lr}
 80a07a4:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
 80a07a6:	f7ff fff3 	bl	80a0790 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a07aa:	4620      	mov	r0, r4
 80a07ac:	bd10      	pop	{r4, pc}
	...

080a07b0 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a07b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a07b4:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a07b6:	4c08      	ldr	r4, [pc, #32]	; (80a07d8 <_GLOBAL__sub_I_System+0x28>)
 80a07b8:	2000      	movs	r0, #0
 80a07ba:	6020      	str	r0, [r4, #0]
 80a07bc:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a07be:	71a0      	strb	r0, [r4, #6]
 80a07c0:	8120      	strh	r0, [r4, #8]
 80a07c2:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a07c4:	f7ff ff46 	bl	80a0654 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a07c8:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a07ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a07ce:	4a03      	ldr	r2, [pc, #12]	; (80a07dc <_GLOBAL__sub_I_System+0x2c>)
 80a07d0:	4903      	ldr	r1, [pc, #12]	; (80a07e0 <_GLOBAL__sub_I_System+0x30>)
 80a07d2:	f000 bda1 	b.w	80a1318 <__aeabi_atexit>
 80a07d6:	bf00      	nop
 80a07d8:	20000084 	.word	0x20000084
 80a07dc:	2000006c 	.word	0x2000006c
 80a07e0:	080a07a3 	.word	0x080a07a3

080a07e4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a07e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a07e6:	4606      	mov	r6, r0
 80a07e8:	460d      	mov	r5, r1
 80a07ea:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a07ec:	2400      	movs	r4, #0
  while (size--) {
 80a07ee:	42bd      	cmp	r5, r7
 80a07f0:	d00c      	beq.n	80a080c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a07f2:	6833      	ldr	r3, [r6, #0]
 80a07f4:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a07f8:	689b      	ldr	r3, [r3, #8]
 80a07fa:	4630      	mov	r0, r6
 80a07fc:	4798      	blx	r3
     if (chunk>=0)
 80a07fe:	2800      	cmp	r0, #0
 80a0800:	db01      	blt.n	80a0806 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0802:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a0804:	e7f3      	b.n	80a07ee <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0806:	2c00      	cmp	r4, #0
 80a0808:	bf08      	it	eq
 80a080a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a080c:	4620      	mov	r0, r4
 80a080e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0810 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0810:	b570      	push	{r4, r5, r6, lr}
 80a0812:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0814:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a0816:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a0818:	b149      	cbz	r1, 80a082e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a081a:	f001 fea5 	bl	80a2568 <strlen>
 80a081e:	682b      	ldr	r3, [r5, #0]
 80a0820:	4602      	mov	r2, r0
 80a0822:	4621      	mov	r1, r4
 80a0824:	4628      	mov	r0, r5
    }
 80a0826:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a082a:	68db      	ldr	r3, [r3, #12]
 80a082c:	4718      	bx	r3
    }
 80a082e:	bd70      	pop	{r4, r5, r6, pc}

080a0830 <_ZN5Print5printEPKc>:
 80a0830:	b508      	push	{r3, lr}
 80a0832:	f7ff ffed 	bl	80a0810 <_ZN5Print5writeEPKc>
 80a0836:	bd08      	pop	{r3, pc}

080a0838 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0838:	6803      	ldr	r3, [r0, #0]
 80a083a:	689b      	ldr	r3, [r3, #8]
 80a083c:	4718      	bx	r3

080a083e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a083e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a0840:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0842:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a0844:	f7ff fff8 	bl	80a0838 <_ZN5Print5printEc>
  n += print('\n');
 80a0848:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a084a:	4604      	mov	r4, r0
  n += print('\n');
 80a084c:	4628      	mov	r0, r5
 80a084e:	f7ff fff3 	bl	80a0838 <_ZN5Print5printEc>
  return n;
}
 80a0852:	4420      	add	r0, r4
 80a0854:	bd38      	pop	{r3, r4, r5, pc}

080a0856 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a0856:	b538      	push	{r3, r4, r5, lr}
 80a0858:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a085a:	f7ff ffd9 	bl	80a0810 <_ZN5Print5writeEPKc>
 80a085e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a0860:	4628      	mov	r0, r5
 80a0862:	f7ff ffec 	bl	80a083e <_ZN5Print7printlnEv>
  return n;
}
 80a0866:	4420      	add	r0, r4
 80a0868:	bd38      	pop	{r3, r4, r5, pc}

080a086a <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a086a:	2a01      	cmp	r2, #1
 80a086c:	bf98      	it	ls
 80a086e:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0870:	b530      	push	{r4, r5, lr}
 80a0872:	460b      	mov	r3, r1
 80a0874:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0876:	2100      	movs	r1, #0
 80a0878:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a087c:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 80a0880:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 80a0884:	fb05 3312 	mls	r3, r5, r2, r3
 80a0888:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a088a:	2b09      	cmp	r3, #9
 80a088c:	bf94      	ite	ls
 80a088e:	3330      	addls	r3, #48	; 0x30
 80a0890:	3337      	addhi	r3, #55	; 0x37
 80a0892:	b2db      	uxtb	r3, r3
 80a0894:	4621      	mov	r1, r4
 80a0896:	f804 3901 	strb.w	r3, [r4], #-1
 80a089a:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a089c:	2d00      	cmp	r5, #0
 80a089e:	d1ef      	bne.n	80a0880 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a08a0:	f7ff ffb6 	bl	80a0810 <_ZN5Print5writeEPKc>
}
 80a08a4:	b00b      	add	sp, #44	; 0x2c
 80a08a6:	bd30      	pop	{r4, r5, pc}

080a08a8 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a08a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a08ac:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a08ae:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a08b0:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a08b2:	4617      	mov	r7, r2
 80a08b4:	461e      	mov	r6, r3
 80a08b6:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a08ba:	f001 fae9 	bl	80a1e90 <__aeabi_dcmpun>
 80a08be:	b108      	cbz	r0, 80a08c4 <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a08c0:	494d      	ldr	r1, [pc, #308]	; (80a09f8 <_ZN5Print10printFloatEdh+0x150>)
 80a08c2:	e012      	b.n	80a08ea <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a08c4:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80a08c8:	f04f 32ff 	mov.w	r2, #4294967295
 80a08cc:	4b4b      	ldr	r3, [pc, #300]	; (80a09fc <_ZN5Print10printFloatEdh+0x154>)
 80a08ce:	4638      	mov	r0, r7
 80a08d0:	4621      	mov	r1, r4
 80a08d2:	f001 fadd 	bl	80a1e90 <__aeabi_dcmpun>
 80a08d6:	b968      	cbnz	r0, 80a08f4 <_ZN5Print10printFloatEdh+0x4c>
 80a08d8:	f04f 32ff 	mov.w	r2, #4294967295
 80a08dc:	4b47      	ldr	r3, [pc, #284]	; (80a09fc <_ZN5Print10printFloatEdh+0x154>)
 80a08de:	4638      	mov	r0, r7
 80a08e0:	4621      	mov	r1, r4
 80a08e2:	f001 fab7 	bl	80a1e54 <__aeabi_dcmple>
 80a08e6:	b928      	cbnz	r0, 80a08f4 <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a08e8:	4945      	ldr	r1, [pc, #276]	; (80a0a00 <_ZN5Print10printFloatEdh+0x158>)
 80a08ea:	4640      	mov	r0, r8
 80a08ec:	f7ff ff90 	bl	80a0810 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a08f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a08f4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a08f8:	4b42      	ldr	r3, [pc, #264]	; (80a0a04 <_ZN5Print10printFloatEdh+0x15c>)
 80a08fa:	4638      	mov	r0, r7
 80a08fc:	4631      	mov	r1, r6
 80a08fe:	f001 fabd 	bl	80a1e7c <__aeabi_dcmpgt>
 80a0902:	b108      	cbz	r0, 80a0908 <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a0904:	4940      	ldr	r1, [pc, #256]	; (80a0a08 <_ZN5Print10printFloatEdh+0x160>)
 80a0906:	e7f0      	b.n	80a08ea <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a0908:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a090c:	4b3f      	ldr	r3, [pc, #252]	; (80a0a0c <_ZN5Print10printFloatEdh+0x164>)
 80a090e:	4638      	mov	r0, r7
 80a0910:	4631      	mov	r1, r6
 80a0912:	f001 fa95 	bl	80a1e40 <__aeabi_dcmplt>
 80a0916:	2800      	cmp	r0, #0
 80a0918:	d1f4      	bne.n	80a0904 <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 80a091a:	2200      	movs	r2, #0
 80a091c:	2300      	movs	r3, #0
 80a091e:	4638      	mov	r0, r7
 80a0920:	4631      	mov	r1, r6
 80a0922:	f001 fa8d 	bl	80a1e40 <__aeabi_dcmplt>
 80a0926:	b138      	cbz	r0, 80a0938 <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 80a0928:	212d      	movs	r1, #45	; 0x2d
 80a092a:	4640      	mov	r0, r8
 80a092c:	f7ff ff84 	bl	80a0838 <_ZN5Print5printEc>
     number = -number;
 80a0930:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 80a0934:	4604      	mov	r4, r0
 80a0936:	e000      	b.n	80a093a <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a0938:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a093a:	4935      	ldr	r1, [pc, #212]	; (80a0a10 <_ZN5Print10printFloatEdh+0x168>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a093c:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a0940:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 80a0942:	fa5f f389 	uxtb.w	r3, r9
 80a0946:	429d      	cmp	r5, r3
 80a0948:	d906      	bls.n	80a0958 <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 80a094a:	2200      	movs	r2, #0
 80a094c:	4b31      	ldr	r3, [pc, #196]	; (80a0a14 <_ZN5Print10printFloatEdh+0x16c>)
 80a094e:	f001 f92f 	bl	80a1bb0 <__aeabi_ddiv>
 80a0952:	f109 0901 	add.w	r9, r9, #1
 80a0956:	e7f4      	b.n	80a0942 <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 80a0958:	463a      	mov	r2, r7
 80a095a:	4633      	mov	r3, r6
 80a095c:	f000 fe4c 	bl	80a15f8 <__adddf3>
 80a0960:	460f      	mov	r7, r1
 80a0962:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a0964:	f001 fad2 	bl	80a1f0c <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a0968:	220a      	movs	r2, #10
 80a096a:	4601      	mov	r1, r0
 80a096c:	4681      	mov	r9, r0
 80a096e:	4640      	mov	r0, r8
 80a0970:	f7ff ff7b 	bl	80a086a <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a0974:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 80a0976:	b3e5      	cbz	r5, 80a09f2 <_ZN5Print10printFloatEdh+0x14a>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 80a0978:	4648      	mov	r0, r9
 80a097a:	f000 ff79 	bl	80a1870 <__aeabi_ui2d>
 80a097e:	4602      	mov	r2, r0
 80a0980:	460b      	mov	r3, r1
 80a0982:	4630      	mov	r0, r6
 80a0984:	4639      	mov	r1, r7
 80a0986:	f000 fe35 	bl	80a15f4 <__aeabi_dsub>
 80a098a:	4606      	mov	r6, r0
 80a098c:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a098e:	4640      	mov	r0, r8
 80a0990:	4921      	ldr	r1, [pc, #132]	; (80a0a18 <_ZN5Print10printFloatEdh+0x170>)
 80a0992:	f7ff ff3d 	bl	80a0810 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 80a0996:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 80a0998:	2200      	movs	r2, #0
 80a099a:	4b1e      	ldr	r3, [pc, #120]	; (80a0a14 <_ZN5Print10printFloatEdh+0x16c>)
 80a099c:	4630      	mov	r0, r6
 80a099e:	4639      	mov	r1, r7
 80a09a0:	f000 ffdc 	bl	80a195c <__aeabi_dmul>
 80a09a4:	4606      	mov	r6, r0
 80a09a6:	460f      	mov	r7, r1
    int toPrint = int(remainder);
 80a09a8:	f001 fa88 	bl	80a1ebc <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
 80a09ac:	f1b0 0a00 	subs.w	sl, r0, #0
 80a09b0:	da07      	bge.n	80a09c2 <_ZN5Print10printFloatEdh+0x11a>
            t = print('-');
 80a09b2:	212d      	movs	r1, #45	; 0x2d
 80a09b4:	4640      	mov	r0, r8
 80a09b6:	f7ff ff3f 	bl	80a0838 <_ZN5Print5printEc>
            val = -n;
 80a09ba:	f1ca 0100 	rsb	r1, sl, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
 80a09be:	4681      	mov	r9, r0
 80a09c0:	e002      	b.n	80a09c8 <_ZN5Print10printFloatEdh+0x120>
            val = -n;
        } else {
            val = n;
 80a09c2:	4651      	mov	r1, sl
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
 80a09c4:	f04f 0900 	mov.w	r9, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a09c8:	220a      	movs	r2, #10
 80a09ca:	4640      	mov	r0, r8
 80a09cc:	f7ff ff4d 	bl	80a086a <_ZN5Print11printNumberEmh>
    n += print(toPrint);
 80a09d0:	4448      	add	r0, r9
 80a09d2:	4404      	add	r4, r0
    remainder -= toPrint;
 80a09d4:	4650      	mov	r0, sl
 80a09d6:	f000 ff5b 	bl	80a1890 <__aeabi_i2d>
 80a09da:	4602      	mov	r2, r0
 80a09dc:	460b      	mov	r3, r1
 80a09de:	4630      	mov	r0, r6
 80a09e0:	4639      	mov	r1, r7
 80a09e2:	f000 fe07 	bl	80a15f4 <__aeabi_dsub>
 80a09e6:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a09e8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 80a09ec:	4606      	mov	r6, r0
 80a09ee:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a09f0:	d1d2      	bne.n	80a0998 <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a09f2:	4620      	mov	r0, r4
 80a09f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a09f8:	080a25ce 	.word	0x080a25ce
 80a09fc:	7fefffff 	.word	0x7fefffff
 80a0a00:	080a25d8 	.word	0x080a25d8
 80a0a04:	41efffff 	.word	0x41efffff
 80a0a08:	080a25d2 	.word	0x080a25d2
 80a0a0c:	c1efffff 	.word	0xc1efffff
 80a0a10:	3fe00000 	.word	0x3fe00000
 80a0a14:	40240000 	.word	0x40240000
 80a0a18:	080a25d6 	.word	0x080a25d6

080a0a1c <_ZN5Print5printEfi>:
{
  return write(c);
}

size_t Print::print(float n, int digits)
{
 80a0a1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0a1e:	4605      	mov	r5, r0
 80a0a20:	4614      	mov	r4, r2
  return printFloat((double)n, digits);
 80a0a22:	4608      	mov	r0, r1
 80a0a24:	f000 ff46 	bl	80a18b4 <__aeabi_f2d>
 80a0a28:	b2e4      	uxtb	r4, r4
 80a0a2a:	4602      	mov	r2, r0
 80a0a2c:	9400      	str	r4, [sp, #0]
 80a0a2e:	460b      	mov	r3, r1
 80a0a30:	4628      	mov	r0, r5
 80a0a32:	f7ff ff39 	bl	80a08a8 <_ZN5Print10printFloatEdh>
}
 80a0a36:	b003      	add	sp, #12
 80a0a38:	bd30      	pop	{r4, r5, pc}

080a0a3a <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a0a3a:	2300      	movs	r3, #0
 80a0a3c:	461a      	mov	r2, r3
 80a0a3e:	4619      	mov	r1, r3
 80a0a40:	6840      	ldr	r0, [r0, #4]
 80a0a42:	f7ff be4b 	b.w	80a06dc <network_on>
	...

080a0a48 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0a48:	4a01      	ldr	r2, [pc, #4]	; (80a0a50 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0a4a:	4b02      	ldr	r3, [pc, #8]	; (80a0a54 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0a4c:	601a      	str	r2, [r3, #0]
 80a0a4e:	4770      	bx	lr
 80a0a50:	080a2652 	.word	0x080a2652
 80a0a54:	20000090 	.word	0x20000090

080a0a58 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0a58:	4b02      	ldr	r3, [pc, #8]	; (80a0a64 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a0a5a:	681a      	ldr	r2, [r3, #0]
 80a0a5c:	4b02      	ldr	r3, [pc, #8]	; (80a0a68 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a0a5e:	601a      	str	r2, [r3, #0]
 80a0a60:	4770      	bx	lr
 80a0a62:	bf00      	nop
 80a0a64:	20000000 	.word	0x20000000
 80a0a68:	20000094 	.word	0x20000094

080a0a6c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0a6c:	2100      	movs	r1, #0
 80a0a6e:	f7ff bdf9 	b.w	80a0664 <system_delay_ms>

080a0a72 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0a72:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0a74:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0a76:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a0a78:	b113      	cbz	r3, 80a0a80 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0a7a:	2203      	movs	r2, #3
 80a0a7c:	4601      	mov	r1, r0
 80a0a7e:	4798      	blx	r3
    }
 80a0a80:	4620      	mov	r0, r4
 80a0a82:	bd10      	pop	{r4, pc}

080a0a84 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a0a84:	b510      	push	{r4, lr}
 80a0a86:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0a88:	f7ff fff3 	bl	80a0a72 <_ZNSt14_Function_baseD1Ev>
 80a0a8c:	4620      	mov	r0, r4
 80a0a8e:	bd10      	pop	{r4, pc}

080a0a90 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0a90:	4803      	ldr	r0, [pc, #12]	; (80a0aa0 <_GLOBAL__sub_I_RGB+0x10>)
 80a0a92:	2300      	movs	r3, #0
 80a0a94:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a0a96:	4a03      	ldr	r2, [pc, #12]	; (80a0aa4 <_GLOBAL__sub_I_RGB+0x14>)
 80a0a98:	4903      	ldr	r1, [pc, #12]	; (80a0aa8 <_GLOBAL__sub_I_RGB+0x18>)
 80a0a9a:	f000 bc3d 	b.w	80a1318 <__aeabi_atexit>
 80a0a9e:	bf00      	nop
 80a0aa0:	20000098 	.word	0x20000098
 80a0aa4:	2000006c 	.word	0x2000006c
 80a0aa8:	080a0a85 	.word	0x080a0a85

080a0aac <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a0aac:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a0aae:	4b14      	ldr	r3, [pc, #80]	; (80a0b00 <serialEventRun+0x54>)
 80a0ab0:	b133      	cbz	r3, 80a0ac0 <serialEventRun+0x14>
 80a0ab2:	f000 f96b 	bl	80a0d8c <_Z16_fetch_usbserialv>
 80a0ab6:	6803      	ldr	r3, [r0, #0]
 80a0ab8:	691b      	ldr	r3, [r3, #16]
 80a0aba:	4798      	blx	r3
 80a0abc:	2800      	cmp	r0, #0
 80a0abe:	dc16      	bgt.n	80a0aee <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a0ac0:	4b10      	ldr	r3, [pc, #64]	; (80a0b04 <serialEventRun+0x58>)
 80a0ac2:	b133      	cbz	r3, 80a0ad2 <serialEventRun+0x26>
 80a0ac4:	f000 fa24 	bl	80a0f10 <_Z22__fetch_global_Serial1v>
 80a0ac8:	6803      	ldr	r3, [r0, #0]
 80a0aca:	691b      	ldr	r3, [r3, #16]
 80a0acc:	4798      	blx	r3
 80a0ace:	2800      	cmp	r0, #0
 80a0ad0:	dc10      	bgt.n	80a0af4 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a0ad2:	4b0d      	ldr	r3, [pc, #52]	; (80a0b08 <serialEventRun+0x5c>)
 80a0ad4:	b10b      	cbz	r3, 80a0ada <serialEventRun+0x2e>
 80a0ad6:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a0ada:	4b0c      	ldr	r3, [pc, #48]	; (80a0b0c <serialEventRun+0x60>)
 80a0adc:	b17b      	cbz	r3, 80a0afe <serialEventRun+0x52>
 80a0ade:	f000 f991 	bl	80a0e04 <_Z17_fetch_usbserial1v>
 80a0ae2:	6803      	ldr	r3, [r0, #0]
 80a0ae4:	691b      	ldr	r3, [r3, #16]
 80a0ae6:	4798      	blx	r3
 80a0ae8:	2800      	cmp	r0, #0
 80a0aea:	dc06      	bgt.n	80a0afa <serialEventRun+0x4e>
 80a0aec:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a0aee:	f3af 8000 	nop.w
 80a0af2:	e7e5      	b.n	80a0ac0 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a0af4:	f3af 8000 	nop.w
 80a0af8:	e7eb      	b.n	80a0ad2 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a0afa:	f3af 8000 	nop.w
 80a0afe:	bd08      	pop	{r3, pc}
	...

080a0b10 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a0b10:	b508      	push	{r3, lr}
	serialEventRun();
 80a0b12:	f7ff ffcb 	bl	80a0aac <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0b16:	f7ff fccb 	bl	80a04b0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0b1a:	4b01      	ldr	r3, [pc, #4]	; (80a0b20 <_post_loop+0x10>)
 80a0b1c:	6018      	str	r0, [r3, #0]
 80a0b1e:	bd08      	pop	{r3, pc}
 80a0b20:	2000052c 	.word	0x2000052c

080a0b24 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0b24:	4802      	ldr	r0, [pc, #8]	; (80a0b30 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a0b26:	4a03      	ldr	r2, [pc, #12]	; (80a0b34 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a0b28:	4903      	ldr	r1, [pc, #12]	; (80a0b38 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a0b2a:	1a12      	subs	r2, r2, r0
 80a0b2c:	f001 bce0 	b.w	80a24f0 <memcpy>
 80a0b30:	40024000 	.word	0x40024000
 80a0b34:	40024004 	.word	0x40024004
 80a0b38:	080a2890 	.word	0x080a2890

080a0b3c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a0b3c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0b3e:	2300      	movs	r3, #0
 80a0b40:	9300      	str	r3, [sp, #0]
 80a0b42:	461a      	mov	r2, r3
 80a0b44:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0b48:	f7ff fd9e 	bl	80a0688 <system_ctrl_set_result>
}
 80a0b4c:	b003      	add	sp, #12
 80a0b4e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a0b54 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a0b54:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a0b56:	8843      	ldrh	r3, [r0, #2]
 80a0b58:	2b0a      	cmp	r3, #10
 80a0b5a:	d008      	beq.n	80a0b6e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a0b5c:	2b50      	cmp	r3, #80	; 0x50
 80a0b5e:	d109      	bne.n	80a0b74 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a0b60:	4b09      	ldr	r3, [pc, #36]	; (80a0b88 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a0b62:	681b      	ldr	r3, [r3, #0]
 80a0b64:	b13b      	cbz	r3, 80a0b76 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a0b66:	b003      	add	sp, #12
 80a0b68:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a0b6c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a0b6e:	f7ff ffe5 	bl	80a0b3c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a0b72:	e006      	b.n	80a0b82 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0b74:	2300      	movs	r3, #0
 80a0b76:	9300      	str	r3, [sp, #0]
 80a0b78:	461a      	mov	r2, r3
 80a0b7a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0b7e:	f7ff fd83 	bl	80a0688 <system_ctrl_set_result>
        break;
    }
}
 80a0b82:	b003      	add	sp, #12
 80a0b84:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0b88:	200000a8 	.word	0x200000a8

080a0b8c <module_user_init_hook>:

void module_user_init_hook()
{
 80a0b8c:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a0b8e:	4c10      	ldr	r4, [pc, #64]	; (80a0bd0 <module_user_init_hook+0x44>)
 80a0b90:	4d10      	ldr	r5, [pc, #64]	; (80a0bd4 <module_user_init_hook+0x48>)
 80a0b92:	6823      	ldr	r3, [r4, #0]
 80a0b94:	42ab      	cmp	r3, r5
 80a0b96:	4b10      	ldr	r3, [pc, #64]	; (80a0bd8 <module_user_init_hook+0x4c>)
 80a0b98:	bf0c      	ite	eq
 80a0b9a:	2201      	moveq	r2, #1
 80a0b9c:	2200      	movne	r2, #0
 80a0b9e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a0ba0:	d002      	beq.n	80a0ba8 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a0ba2:	f7ff ffbf 	bl	80a0b24 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a0ba6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a0ba8:	f7ff fc72 	bl	80a0490 <HAL_RNG_GetRandomNumber>
 80a0bac:	4604      	mov	r4, r0
    srand(seed);
 80a0bae:	f001 fcb3 	bl	80a2518 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a0bb2:	4b0a      	ldr	r3, [pc, #40]	; (80a0bdc <module_user_init_hook+0x50>)
 80a0bb4:	b113      	cbz	r3, 80a0bbc <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a0bb6:	4620      	mov	r0, r4
 80a0bb8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a0bbc:	2100      	movs	r1, #0
 80a0bbe:	4807      	ldr	r0, [pc, #28]	; (80a0bdc <module_user_init_hook+0x50>)
 80a0bc0:	f7ff fdbc 	bl	80a073c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a0bc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a0bc8:	2100      	movs	r1, #0
 80a0bca:	4805      	ldr	r0, [pc, #20]	; (80a0be0 <module_user_init_hook+0x54>)
 80a0bcc:	f7ff bd52 	b.w	80a0674 <system_ctrl_set_app_request_handler>
 80a0bd0:	40024000 	.word	0x40024000
 80a0bd4:	9a271c1e 	.word	0x9a271c1e
 80a0bd8:	200000ac 	.word	0x200000ac
 80a0bdc:	00000000 	.word	0x00000000
 80a0be0:	080a0b55 	.word	0x080a0b55

080a0be4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0be4:	4770      	bx	lr

080a0be6 <_ZN9IPAddressD0Ev>:
 80a0be6:	b510      	push	{r4, lr}
 80a0be8:	4604      	mov	r4, r0
 80a0bea:	2118      	movs	r1, #24
 80a0bec:	f000 fba2 	bl	80a1334 <_ZdlPvj>
 80a0bf0:	4620      	mov	r0, r4
 80a0bf2:	bd10      	pop	{r4, pc}

080a0bf4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0bf6:	460f      	mov	r7, r1
 80a0bf8:	f100 0608 	add.w	r6, r0, #8
 80a0bfc:	1d05      	adds	r5, r0, #4
 80a0bfe:	2400      	movs	r4, #0
 80a0c00:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a0c04:	220a      	movs	r2, #10
 80a0c06:	4638      	mov	r0, r7
 80a0c08:	f7ff fe2f 	bl	80a086a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0c0c:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0c0e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0c10:	d007      	beq.n	80a0c22 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a0c12:	2c00      	cmp	r4, #0
 80a0c14:	d0f4      	beq.n	80a0c00 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0c16:	212e      	movs	r1, #46	; 0x2e
 80a0c18:	4638      	mov	r0, r7
 80a0c1a:	f7ff fe0d 	bl	80a0838 <_ZN5Print5printEc>
 80a0c1e:	4404      	add	r4, r0
 80a0c20:	e7ee      	b.n	80a0c00 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a0c22:	4620      	mov	r0, r4
 80a0c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a0c28 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a0c28:	b510      	push	{r4, lr}
 80a0c2a:	4604      	mov	r4, r0
 80a0c2c:	4b04      	ldr	r3, [pc, #16]	; (80a0c40 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0c2e:	2211      	movs	r2, #17
 80a0c30:	f840 3b04 	str.w	r3, [r0], #4
 80a0c34:	2100      	movs	r1, #0
 80a0c36:	f001 fc66 	bl	80a2506 <memset>
{
    clear();
}
 80a0c3a:	4620      	mov	r0, r4
 80a0c3c:	bd10      	pop	{r4, pc}
 80a0c3e:	bf00      	nop
 80a0c40:	080a26f0 	.word	0x080a26f0

080a0c44 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a0c44:	4603      	mov	r3, r0
 80a0c46:	4a07      	ldr	r2, [pc, #28]	; (80a0c64 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0c48:	b510      	push	{r4, lr}
 80a0c4a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a0c4e:	f101 0210 	add.w	r2, r1, #16
 80a0c52:	f851 4b04 	ldr.w	r4, [r1], #4
 80a0c56:	4291      	cmp	r1, r2
 80a0c58:	f843 4b04 	str.w	r4, [r3], #4
 80a0c5c:	d1f9      	bne.n	80a0c52 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a0c5e:	780a      	ldrb	r2, [r1, #0]
 80a0c60:	701a      	strb	r2, [r3, #0]
}
 80a0c62:	bd10      	pop	{r4, pc}
 80a0c64:	080a26f0 	.word	0x080a26f0

080a0c68 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0c68:	4a02      	ldr	r2, [pc, #8]	; (80a0c74 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a0c6a:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0c6c:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a0c6e:	2204      	movs	r2, #4
 80a0c70:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a0c72:	4770      	bx	lr
 80a0c74:	080a26f0 	.word	0x080a26f0

080a0c78 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a0c78:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0c7a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0c7e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a0c82:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a0c86:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a0c8a:	2304      	movs	r3, #4
 80a0c8c:	6041      	str	r1, [r0, #4]
 80a0c8e:	7503      	strb	r3, [r0, #20]
 80a0c90:	bd10      	pop	{r4, pc}
	...

080a0c94 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0c94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0c96:	4d04      	ldr	r5, [pc, #16]	; (80a0ca8 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0c98:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0c9a:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a0c9e:	9500      	str	r5, [sp, #0]
 80a0ca0:	f7ff ffea 	bl	80a0c78 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0ca4:	b003      	add	sp, #12
 80a0ca6:	bd30      	pop	{r4, r5, pc}
 80a0ca8:	080a26f0 	.word	0x080a26f0

080a0cac <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0cac:	7441      	strb	r1, [r0, #17]
 80a0cae:	4770      	bx	lr

080a0cb0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a0cb0:	4770      	bx	lr

080a0cb2 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a0cb2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a0cb4:	2100      	movs	r1, #0
 80a0cb6:	7c00      	ldrb	r0, [r0, #16]
 80a0cb8:	f7ff fcac 	bl	80a0614 <HAL_USB_USART_Receive_Data>
}
 80a0cbc:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0cc0:	bf28      	it	cs
 80a0cc2:	f04f 30ff 	movcs.w	r0, #4294967295
 80a0cc6:	bd08      	pop	{r3, pc}

080a0cc8 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a0cc8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a0cca:	2101      	movs	r1, #1
 80a0ccc:	7c00      	ldrb	r0, [r0, #16]
 80a0cce:	f7ff fca1 	bl	80a0614 <HAL_USB_USART_Receive_Data>
}
 80a0cd2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0cd6:	bf28      	it	cs
 80a0cd8:	f04f 30ff 	movcs.w	r0, #4294967295
 80a0cdc:	bd08      	pop	{r3, pc}

080a0cde <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a0cde:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a0ce0:	7c00      	ldrb	r0, [r0, #16]
 80a0ce2:	f7ff fc8f 	bl	80a0604 <HAL_USB_USART_Available_Data_For_Write>
}
 80a0ce6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0cea:	bd08      	pop	{r3, pc}

080a0cec <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a0cec:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a0cee:	7c00      	ldrb	r0, [r0, #16]
 80a0cf0:	f7ff fc80 	bl	80a05f4 <HAL_USB_USART_Available_Data>
}
 80a0cf4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0cf8:	bd08      	pop	{r3, pc}

080a0cfa <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a0cfa:	7c00      	ldrb	r0, [r0, #16]
 80a0cfc:	f7ff bc9a 	b.w	80a0634 <HAL_USB_USART_Flush_Data>

080a0d00 <_ZN9USBSerialD0Ev>:
 80a0d00:	b510      	push	{r4, lr}
 80a0d02:	4604      	mov	r4, r0
 80a0d04:	2114      	movs	r1, #20
 80a0d06:	f000 fb15 	bl	80a1334 <_ZdlPvj>
 80a0d0a:	4620      	mov	r0, r4
 80a0d0c:	bd10      	pop	{r4, pc}

080a0d0e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a0d0e:	b538      	push	{r3, r4, r5, lr}
 80a0d10:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0d12:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a0d14:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0d16:	f7ff fc75 	bl	80a0604 <HAL_USB_USART_Available_Data_For_Write>
 80a0d1a:	2800      	cmp	r0, #0
 80a0d1c:	dc01      	bgt.n	80a0d22 <_ZN9USBSerial5writeEh+0x14>
 80a0d1e:	7c60      	ldrb	r0, [r4, #17]
 80a0d20:	b128      	cbz	r0, 80a0d2e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a0d22:	4629      	mov	r1, r5
 80a0d24:	7c20      	ldrb	r0, [r4, #16]
 80a0d26:	f7ff fc7d 	bl	80a0624 <HAL_USB_USART_Send_Data>
 80a0d2a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a0d2e:	bd38      	pop	{r3, r4, r5, pc}

080a0d30 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0d30:	b510      	push	{r4, lr}
 80a0d32:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0d34:	2300      	movs	r3, #0
 80a0d36:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0d38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0d3c:	60a3      	str	r3, [r4, #8]
 80a0d3e:	4b05      	ldr	r3, [pc, #20]	; (80a0d54 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a0d40:	4608      	mov	r0, r1
 80a0d42:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a0d44:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a0d46:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a0d48:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a0d4a:	4611      	mov	r1, r2
 80a0d4c:	f7ff fc42 	bl	80a05d4 <HAL_USB_USART_Init>
}
 80a0d50:	4620      	mov	r0, r4
 80a0d52:	bd10      	pop	{r4, pc}
 80a0d54:	080a2704 	.word	0x080a2704

080a0d58 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a0d58:	2200      	movs	r2, #0
 80a0d5a:	7c00      	ldrb	r0, [r0, #16]
 80a0d5c:	f7ff bc42 	b.w	80a05e4 <HAL_USB_USART_Begin>

080a0d60 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a0d60:	b510      	push	{r4, lr}
 80a0d62:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0d64:	2214      	movs	r2, #20
 80a0d66:	2100      	movs	r1, #0
 80a0d68:	f001 fbcd 	bl	80a2506 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a0d6c:	4b05      	ldr	r3, [pc, #20]	; (80a0d84 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0d6e:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a0d70:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a0d72:	4b05      	ldr	r3, [pc, #20]	; (80a0d88 <_Z19acquireSerialBufferv+0x28>)
 80a0d74:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0d76:	f240 1301 	movw	r3, #257	; 0x101
 80a0d7a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0d7c:	2381      	movs	r3, #129	; 0x81
 80a0d7e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a0d80:	bd10      	pop	{r4, pc}
 80a0d82:	bf00      	nop
 80a0d84:	20000135 	.word	0x20000135
 80a0d88:	200000b4 	.word	0x200000b4

080a0d8c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a0d8c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0d8e:	4d0e      	ldr	r5, [pc, #56]	; (80a0dc8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a0d90:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a0d92:	a801      	add	r0, sp, #4
 80a0d94:	f7ff ffe4 	bl	80a0d60 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0d98:	6829      	ldr	r1, [r5, #0]
 80a0d9a:	f011 0401 	ands.w	r4, r1, #1
 80a0d9e:	d110      	bne.n	80a0dc2 <_Z16_fetch_usbserialv+0x36>
 80a0da0:	4628      	mov	r0, r5
 80a0da2:	f7ff f97e 	bl	80a00a2 <__cxa_guard_acquire>
 80a0da6:	b160      	cbz	r0, 80a0dc2 <_Z16_fetch_usbserialv+0x36>
 80a0da8:	aa01      	add	r2, sp, #4
 80a0daa:	4621      	mov	r1, r4
 80a0dac:	4807      	ldr	r0, [pc, #28]	; (80a0dcc <_Z16_fetch_usbserialv+0x40>)
 80a0dae:	f7ff ffbf 	bl	80a0d30 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0db2:	4628      	mov	r0, r5
 80a0db4:	f7ff f97a 	bl	80a00ac <__cxa_guard_release>
 80a0db8:	4a05      	ldr	r2, [pc, #20]	; (80a0dd0 <_Z16_fetch_usbserialv+0x44>)
 80a0dba:	4906      	ldr	r1, [pc, #24]	; (80a0dd4 <_Z16_fetch_usbserialv+0x48>)
 80a0dbc:	4803      	ldr	r0, [pc, #12]	; (80a0dcc <_Z16_fetch_usbserialv+0x40>)
 80a0dbe:	f000 faab 	bl	80a1318 <__aeabi_atexit>
	return _usbserial;
}
 80a0dc2:	4802      	ldr	r0, [pc, #8]	; (80a0dcc <_Z16_fetch_usbserialv+0x40>)
 80a0dc4:	b007      	add	sp, #28
 80a0dc6:	bd30      	pop	{r4, r5, pc}
 80a0dc8:	200000b0 	.word	0x200000b0
 80a0dcc:	20000238 	.word	0x20000238
 80a0dd0:	2000006c 	.word	0x2000006c
 80a0dd4:	080a0cb1 	.word	0x080a0cb1

080a0dd8 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a0dd8:	b510      	push	{r4, lr}
 80a0dda:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0ddc:	2214      	movs	r2, #20
 80a0dde:	2100      	movs	r1, #0
 80a0de0:	f001 fb91 	bl	80a2506 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0de4:	4b05      	ldr	r3, [pc, #20]	; (80a0dfc <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0de6:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0de8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a0dea:	4b05      	ldr	r3, [pc, #20]	; (80a0e00 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a0dec:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0dee:	f240 1301 	movw	r3, #257	; 0x101
 80a0df2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0df4:	2381      	movs	r3, #129	; 0x81
 80a0df6:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a0df8:	bd10      	pop	{r4, pc}
 80a0dfa:	bf00      	nop
 80a0dfc:	200002e8 	.word	0x200002e8
 80a0e00:	20000250 	.word	0x20000250

080a0e04 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a0e04:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0e06:	4c0e      	ldr	r4, [pc, #56]	; (80a0e40 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a0e08:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a0e0a:	a801      	add	r0, sp, #4
 80a0e0c:	f7ff ffe4 	bl	80a0dd8 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0e10:	6823      	ldr	r3, [r4, #0]
 80a0e12:	07db      	lsls	r3, r3, #31
 80a0e14:	d410      	bmi.n	80a0e38 <_Z17_fetch_usbserial1v+0x34>
 80a0e16:	4620      	mov	r0, r4
 80a0e18:	f7ff f943 	bl	80a00a2 <__cxa_guard_acquire>
 80a0e1c:	b160      	cbz	r0, 80a0e38 <_Z17_fetch_usbserial1v+0x34>
 80a0e1e:	aa01      	add	r2, sp, #4
 80a0e20:	2101      	movs	r1, #1
 80a0e22:	4808      	ldr	r0, [pc, #32]	; (80a0e44 <_Z17_fetch_usbserial1v+0x40>)
 80a0e24:	f7ff ff84 	bl	80a0d30 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0e28:	4620      	mov	r0, r4
 80a0e2a:	f7ff f93f 	bl	80a00ac <__cxa_guard_release>
 80a0e2e:	4a06      	ldr	r2, [pc, #24]	; (80a0e48 <_Z17_fetch_usbserial1v+0x44>)
 80a0e30:	4906      	ldr	r1, [pc, #24]	; (80a0e4c <_Z17_fetch_usbserial1v+0x48>)
 80a0e32:	4804      	ldr	r0, [pc, #16]	; (80a0e44 <_Z17_fetch_usbserial1v+0x40>)
 80a0e34:	f000 fa70 	bl	80a1318 <__aeabi_atexit>
  return _usbserial1;
}
 80a0e38:	4802      	ldr	r0, [pc, #8]	; (80a0e44 <_Z17_fetch_usbserial1v+0x40>)
 80a0e3a:	b006      	add	sp, #24
 80a0e3c:	bd10      	pop	{r4, pc}
 80a0e3e:	bf00      	nop
 80a0e40:	2000024c 	.word	0x2000024c
 80a0e44:	200002d4 	.word	0x200002d4
 80a0e48:	2000006c 	.word	0x2000006c
 80a0e4c:	080a0cb1 	.word	0x080a0cb1

080a0e50 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
 80a0e50:	f7ff bb06 	b.w	80a0460 <HAL_Interrupts_Disable_All>

080a0e54 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
 80a0e54:	f7ff bafc 	b.w	80a0450 <HAL_Interrupts_Enable_All>

080a0e58 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a0e58:	4770      	bx	lr

080a0e5a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0e5a:	7441      	strb	r1, [r0, #17]
 80a0e5c:	4770      	bx	lr

080a0e5e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a0e5e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a0e60:	7c00      	ldrb	r0, [r0, #16]
 80a0e62:	f7ff fb75 	bl	80a0550 <HAL_USART_Available_Data_For_Write>
}
 80a0e66:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0e6a:	bd08      	pop	{r3, pc}

080a0e6c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a0e6c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a0e6e:	7c00      	ldrb	r0, [r0, #16]
 80a0e70:	f7ff fb46 	bl	80a0500 <HAL_USART_Available_Data>
}
 80a0e74:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0e78:	bd08      	pop	{r3, pc}

080a0e7a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a0e7a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a0e7c:	7c00      	ldrb	r0, [r0, #16]
 80a0e7e:	f7ff fb4f 	bl	80a0520 <HAL_USART_Peek_Data>
}
 80a0e82:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0e86:	bf28      	it	cs
 80a0e88:	f04f 30ff 	movcs.w	r0, #4294967295
 80a0e8c:	bd08      	pop	{r3, pc}

080a0e8e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a0e8e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a0e90:	7c00      	ldrb	r0, [r0, #16]
 80a0e92:	f7ff fb3d 	bl	80a0510 <HAL_USART_Read_Data>
}
 80a0e96:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0e9a:	bf28      	it	cs
 80a0e9c:	f04f 30ff 	movcs.w	r0, #4294967295
 80a0ea0:	bd08      	pop	{r3, pc}

080a0ea2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a0ea2:	7c00      	ldrb	r0, [r0, #16]
 80a0ea4:	f7ff bb44 	b.w	80a0530 <HAL_USART_Flush_Data>

080a0ea8 <_ZN11USARTSerialD0Ev>:
 80a0ea8:	b510      	push	{r4, lr}
 80a0eaa:	4604      	mov	r4, r0
 80a0eac:	2114      	movs	r1, #20
 80a0eae:	f000 fa41 	bl	80a1334 <_ZdlPvj>
 80a0eb2:	4620      	mov	r0, r4
 80a0eb4:	bd10      	pop	{r4, pc}

080a0eb6 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a0eb6:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0eb8:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a0eba:	4604      	mov	r4, r0
 80a0ebc:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0ebe:	b925      	cbnz	r5, 80a0eca <_ZN11USARTSerial5writeEh+0x14>
 80a0ec0:	7c00      	ldrb	r0, [r0, #16]
 80a0ec2:	f7ff fb45 	bl	80a0550 <HAL_USART_Available_Data_For_Write>
 80a0ec6:	2800      	cmp	r0, #0
 80a0ec8:	dd05      	ble.n	80a0ed6 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0eca:	4631      	mov	r1, r6
 80a0ecc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a0ece:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0ed2:	f7ff bb0d 	b.w	80a04f0 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a0ed6:	4628      	mov	r0, r5
 80a0ed8:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0edc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0edc:	b510      	push	{r4, lr}
 80a0ede:	4604      	mov	r4, r0
 80a0ee0:	4608      	mov	r0, r1
 80a0ee2:	4611      	mov	r1, r2
 80a0ee4:	2200      	movs	r2, #0
 80a0ee6:	6062      	str	r2, [r4, #4]
 80a0ee8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a0eec:	60a2      	str	r2, [r4, #8]
 80a0eee:	4a05      	ldr	r2, [pc, #20]	; (80a0f04 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a0ef0:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0ef2:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a0ef4:	2201      	movs	r2, #1
 80a0ef6:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a0ef8:	461a      	mov	r2, r3
 80a0efa:	f7ff faf1 	bl	80a04e0 <HAL_USART_Init>
}
 80a0efe:	4620      	mov	r0, r4
 80a0f00:	bd10      	pop	{r4, pc}
 80a0f02:	bf00      	nop
 80a0f04:	080a2734 	.word	0x080a2734

080a0f08 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a0f08:	7c00      	ldrb	r0, [r0, #16]
 80a0f0a:	f7ff bb19 	b.w	80a0540 <HAL_USART_Is_Enabled>
	...

080a0f10 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a0f10:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a0f12:	4d0c      	ldr	r5, [pc, #48]	; (80a0f44 <_Z22__fetch_global_Serial1v+0x34>)
 80a0f14:	6829      	ldr	r1, [r5, #0]
 80a0f16:	f011 0401 	ands.w	r4, r1, #1
 80a0f1a:	d111      	bne.n	80a0f40 <_Z22__fetch_global_Serial1v+0x30>
 80a0f1c:	4628      	mov	r0, r5
 80a0f1e:	f7ff f8c0 	bl	80a00a2 <__cxa_guard_acquire>
 80a0f22:	b168      	cbz	r0, 80a0f40 <_Z22__fetch_global_Serial1v+0x30>
 80a0f24:	4a08      	ldr	r2, [pc, #32]	; (80a0f48 <_Z22__fetch_global_Serial1v+0x38>)
 80a0f26:	4621      	mov	r1, r4
 80a0f28:	4b08      	ldr	r3, [pc, #32]	; (80a0f4c <_Z22__fetch_global_Serial1v+0x3c>)
 80a0f2a:	4809      	ldr	r0, [pc, #36]	; (80a0f50 <_Z22__fetch_global_Serial1v+0x40>)
 80a0f2c:	f7ff ffd6 	bl	80a0edc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a0f30:	4628      	mov	r0, r5
 80a0f32:	f7ff f8bb 	bl	80a00ac <__cxa_guard_release>
 80a0f36:	4a07      	ldr	r2, [pc, #28]	; (80a0f54 <_Z22__fetch_global_Serial1v+0x44>)
 80a0f38:	4907      	ldr	r1, [pc, #28]	; (80a0f58 <_Z22__fetch_global_Serial1v+0x48>)
 80a0f3a:	4805      	ldr	r0, [pc, #20]	; (80a0f50 <_Z22__fetch_global_Serial1v+0x40>)
 80a0f3c:	f000 f9ec 	bl	80a1318 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a0f40:	4803      	ldr	r0, [pc, #12]	; (80a0f50 <_Z22__fetch_global_Serial1v+0x40>)
 80a0f42:	bd38      	pop	{r3, r4, r5, pc}
 80a0f44:	20000484 	.word	0x20000484
 80a0f48:	20000488 	.word	0x20000488
 80a0f4c:	20000400 	.word	0x20000400
 80a0f50:	200003ec 	.word	0x200003ec
 80a0f54:	2000006c 	.word	0x2000006c
 80a0f58:	080a0e59 	.word	0x080a0e59

080a0f5c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
 80a0f5c:	4770      	bx	lr

080a0f5e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a0f5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0f60:	4606      	mov	r6, r0
 80a0f62:	4615      	mov	r5, r2
 80a0f64:	460c      	mov	r4, r1
 80a0f66:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0f68:	42bc      	cmp	r4, r7
 80a0f6a:	d006      	beq.n	80a0f7a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a0f6c:	6833      	ldr	r3, [r6, #0]
 80a0f6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a0f72:	689b      	ldr	r3, [r3, #8]
 80a0f74:	4630      	mov	r0, r6
 80a0f76:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0f78:	e7f6      	b.n	80a0f68 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a0f7a:	4628      	mov	r0, r5
 80a0f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0f7e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a0f7e:	2200      	movs	r2, #0
 80a0f80:	7c00      	ldrb	r0, [r0, #16]
 80a0f82:	f7ff baed 	b.w	80a0560 <HAL_I2C_Write_Data>

080a0f86 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a0f86:	2100      	movs	r1, #0
 80a0f88:	7c00      	ldrb	r0, [r0, #16]
 80a0f8a:	f7ff baf1 	b.w	80a0570 <HAL_I2C_Available_Data>

080a0f8e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a0f8e:	2100      	movs	r1, #0
 80a0f90:	7c00      	ldrb	r0, [r0, #16]
 80a0f92:	f7ff baf5 	b.w	80a0580 <HAL_I2C_Read_Data>

080a0f96 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a0f96:	2100      	movs	r1, #0
 80a0f98:	7c00      	ldrb	r0, [r0, #16]
 80a0f9a:	f7ff baf9 	b.w	80a0590 <HAL_I2C_Peek_Data>

080a0f9e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a0f9e:	2100      	movs	r1, #0
 80a0fa0:	7c00      	ldrb	r0, [r0, #16]
 80a0fa2:	f7ff bafd 	b.w	80a05a0 <HAL_I2C_Flush_Data>

080a0fa6 <_ZN7TwoWireD0Ev>:
 80a0fa6:	b510      	push	{r4, lr}
 80a0fa8:	4604      	mov	r4, r0
 80a0faa:	2114      	movs	r1, #20
 80a0fac:	f000 f9c2 	bl	80a1334 <_ZdlPvj>
 80a0fb0:	4620      	mov	r0, r4
 80a0fb2:	bd10      	pop	{r4, pc}

080a0fb4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a0fb4:	b510      	push	{r4, lr}
 80a0fb6:	4604      	mov	r4, r0
 80a0fb8:	2300      	movs	r3, #0
 80a0fba:	6063      	str	r3, [r4, #4]
 80a0fbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0fc0:	60a3      	str	r3, [r4, #8]
 80a0fc2:	4b04      	ldr	r3, [pc, #16]	; (80a0fd4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
 80a0fc4:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a0fc6:	4608      	mov	r0, r1
 80a0fc8:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
 80a0fca:	4611      	mov	r1, r2
 80a0fcc:	f7ff faf8 	bl	80a05c0 <HAL_I2C_Init>
}
 80a0fd0:	4620      	mov	r0, r4
 80a0fd2:	bd10      	pop	{r4, pc}
 80a0fd4:	080a2764 	.word	0x080a2764

080a0fd8 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a0fd8:	2100      	movs	r1, #0
 80a0fda:	7c00      	ldrb	r0, [r0, #16]
 80a0fdc:	f7ff bae8 	b.w	80a05b0 <HAL_I2C_Is_Enabled>

080a0fe0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a0fe0:	2200      	movs	r2, #0
 80a0fe2:	4611      	mov	r1, r2
 80a0fe4:	6840      	ldr	r0, [r0, #4]
 80a0fe6:	f7ff bb71 	b.w	80a06cc <network_ready>

080a0fea <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a0fea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0fec:	4616      	mov	r6, r2
 80a0fee:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a0ff0:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a0ff2:	460f      	mov	r7, r1
 80a0ff4:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a0ff6:	2100      	movs	r1, #0
 80a0ff8:	a803      	add	r0, sp, #12
 80a0ffa:	f001 fa84 	bl	80a2506 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0ffe:	4630      	mov	r0, r6
 80a1000:	f001 fab2 	bl	80a2568 <strlen>
 80a1004:	2500      	movs	r5, #0
 80a1006:	9500      	str	r5, [sp, #0]
 80a1008:	b281      	uxth	r1, r0
 80a100a:	687b      	ldr	r3, [r7, #4]
 80a100c:	aa03      	add	r2, sp, #12
 80a100e:	4630      	mov	r0, r6
 80a1010:	f7ff fb18 	bl	80a0644 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1014:	b120      	cbz	r0, 80a1020 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a1016:	4629      	mov	r1, r5
 80a1018:	4620      	mov	r0, r4
 80a101a:	f7ff fe25 	bl	80a0c68 <_ZN9IPAddressC1Em>
 80a101e:	e003      	b.n	80a1028 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a1020:	a903      	add	r1, sp, #12
 80a1022:	4620      	mov	r0, r4
 80a1024:	f7ff fe0e 	bl	80a0c44 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a1028:	4620      	mov	r0, r4
 80a102a:	b009      	add	sp, #36	; 0x24
 80a102c:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a102e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a102e:	2200      	movs	r2, #0
 80a1030:	4611      	mov	r1, r2
 80a1032:	6840      	ldr	r0, [r0, #4]
 80a1034:	f7ff bb6a 	b.w	80a070c <network_listening>

080a1038 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a1038:	2200      	movs	r2, #0
 80a103a:	4611      	mov	r1, r2
 80a103c:	6840      	ldr	r0, [r0, #4]
 80a103e:	f7ff bb75 	b.w	80a072c <network_get_listen_timeout>

080a1042 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a1042:	2200      	movs	r2, #0
 80a1044:	6840      	ldr	r0, [r0, #4]
 80a1046:	f7ff bb69 	b.w	80a071c <network_set_listen_timeout>

080a104a <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a104a:	2200      	movs	r2, #0
 80a104c:	f081 0101 	eor.w	r1, r1, #1
 80a1050:	6840      	ldr	r0, [r0, #4]
 80a1052:	f7ff bb53 	b.w	80a06fc <network_listen>

080a1056 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a1056:	2300      	movs	r3, #0
 80a1058:	461a      	mov	r2, r3
 80a105a:	4619      	mov	r1, r3
 80a105c:	6840      	ldr	r0, [r0, #4]
 80a105e:	f7ff bb45 	b.w	80a06ec <network_off>

080a1062 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a1062:	2200      	movs	r2, #0
 80a1064:	4611      	mov	r1, r2
 80a1066:	6840      	ldr	r0, [r0, #4]
 80a1068:	f7ff bb20 	b.w	80a06ac <network_connecting>

080a106c <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a106c:	2200      	movs	r2, #0
 80a106e:	2102      	movs	r1, #2
 80a1070:	6840      	ldr	r0, [r0, #4]
 80a1072:	f7ff bb23 	b.w	80a06bc <network_disconnect>

080a1076 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a1076:	2300      	movs	r3, #0
 80a1078:	461a      	mov	r2, r3
 80a107a:	6840      	ldr	r0, [r0, #4]
 80a107c:	f7ff bb0e 	b.w	80a069c <network_connect>

080a1080 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1080:	4b02      	ldr	r3, [pc, #8]	; (80a108c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a1082:	2204      	movs	r2, #4
 80a1084:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a1086:	4a02      	ldr	r2, [pc, #8]	; (80a1090 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1088:	601a      	str	r2, [r3, #0]
 80a108a:	4770      	bx	lr
 80a108c:	2000050c 	.word	0x2000050c
 80a1090:	080a278c 	.word	0x080a278c

080a1094 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1094:	2300      	movs	r3, #0
 80a1096:	461a      	mov	r2, r3
 80a1098:	6840      	ldr	r0, [r0, #4]
 80a109a:	f7ff baff 	b.w	80a069c <network_connect>

080a109e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a109e:	2200      	movs	r2, #0
 80a10a0:	2102      	movs	r1, #2
 80a10a2:	6840      	ldr	r0, [r0, #4]
 80a10a4:	f7ff bb0a 	b.w	80a06bc <network_disconnect>

080a10a8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a10a8:	2200      	movs	r2, #0
 80a10aa:	4611      	mov	r1, r2
 80a10ac:	6840      	ldr	r0, [r0, #4]
 80a10ae:	f7ff bafd 	b.w	80a06ac <network_connecting>

080a10b2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a10b2:	2200      	movs	r2, #0
 80a10b4:	4611      	mov	r1, r2
 80a10b6:	6840      	ldr	r0, [r0, #4]
 80a10b8:	f7ff bb08 	b.w	80a06cc <network_ready>

080a10bc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a10bc:	2300      	movs	r3, #0
 80a10be:	461a      	mov	r2, r3
 80a10c0:	4619      	mov	r1, r3
 80a10c2:	6840      	ldr	r0, [r0, #4]
 80a10c4:	f7ff bb0a 	b.w	80a06dc <network_on>

080a10c8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a10c8:	2300      	movs	r3, #0
 80a10ca:	461a      	mov	r2, r3
 80a10cc:	4619      	mov	r1, r3
 80a10ce:	6840      	ldr	r0, [r0, #4]
 80a10d0:	f7ff bb0c 	b.w	80a06ec <network_off>

080a10d4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a10d4:	2200      	movs	r2, #0
 80a10d6:	f081 0101 	eor.w	r1, r1, #1
 80a10da:	6840      	ldr	r0, [r0, #4]
 80a10dc:	f7ff bb0e 	b.w	80a06fc <network_listen>

080a10e0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a10e0:	2200      	movs	r2, #0
 80a10e2:	6840      	ldr	r0, [r0, #4]
 80a10e4:	f7ff bb1a 	b.w	80a071c <network_set_listen_timeout>

080a10e8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a10e8:	2200      	movs	r2, #0
 80a10ea:	4611      	mov	r1, r2
 80a10ec:	6840      	ldr	r0, [r0, #4]
 80a10ee:	f7ff bb1d 	b.w	80a072c <network_get_listen_timeout>

080a10f2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a10f2:	2200      	movs	r2, #0
 80a10f4:	4611      	mov	r1, r2
 80a10f6:	6840      	ldr	r0, [r0, #4]
 80a10f8:	f7ff bb08 	b.w	80a070c <network_listening>

080a10fc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a10fc:	b570      	push	{r4, r5, r6, lr}
 80a10fe:	4616      	mov	r6, r2
 80a1100:	b08e      	sub	sp, #56	; 0x38
 80a1102:	4604      	mov	r4, r0
    IPAddress addr;
 80a1104:	a808      	add	r0, sp, #32
 80a1106:	f7ff fd8f 	bl	80a0c28 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a110a:	2211      	movs	r2, #17
 80a110c:	2100      	movs	r1, #0
 80a110e:	a803      	add	r0, sp, #12
 80a1110:	f001 f9f9 	bl	80a2506 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1114:	4630      	mov	r0, r6
 80a1116:	f001 fa27 	bl	80a2568 <strlen>
 80a111a:	2500      	movs	r5, #0
 80a111c:	4b0a      	ldr	r3, [pc, #40]	; (80a1148 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a111e:	9500      	str	r5, [sp, #0]
 80a1120:	b281      	uxth	r1, r0
 80a1122:	685b      	ldr	r3, [r3, #4]
 80a1124:	aa03      	add	r2, sp, #12
 80a1126:	4630      	mov	r0, r6
 80a1128:	f7ff fa8c 	bl	80a0644 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a112c:	b120      	cbz	r0, 80a1138 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a112e:	4629      	mov	r1, r5
 80a1130:	4620      	mov	r0, r4
 80a1132:	f7ff fd99 	bl	80a0c68 <_ZN9IPAddressC1Em>
 80a1136:	e003      	b.n	80a1140 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a1138:	a903      	add	r1, sp, #12
 80a113a:	4620      	mov	r0, r4
 80a113c:	f7ff fd82 	bl	80a0c44 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a1140:	4620      	mov	r0, r4
 80a1142:	b00e      	add	sp, #56	; 0x38
 80a1144:	bd70      	pop	{r4, r5, r6, pc}
 80a1146:	bf00      	nop
 80a1148:	2000050c 	.word	0x2000050c

080a114c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a114c:	4b02      	ldr	r3, [pc, #8]	; (80a1158 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a114e:	4a03      	ldr	r2, [pc, #12]	; (80a115c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1150:	601a      	str	r2, [r3, #0]
 80a1152:	2200      	movs	r2, #0
 80a1154:	605a      	str	r2, [r3, #4]
 80a1156:	4770      	bx	lr
 80a1158:	20000514 	.word	0x20000514
 80a115c:	080a27c0 	.word	0x080a27c0

080a1160 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  ~SPIClass() = default;
 80a1160:	b510      	push	{r4, lr}
 80a1162:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a1164:	6880      	ldr	r0, [r0, #8]
 80a1166:	b108      	cbz	r0, 80a116c <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a1168:	f7ff f9b2 	bl	80a04d0 <os_mutex_recursive_destroy>
 80a116c:	4620      	mov	r0, r4
 80a116e:	bd10      	pop	{r4, pc}

080a1170 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a1170:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a1172:	4e1a      	ldr	r6, [pc, #104]	; (80a11dc <pinAvailable+0x6c>)
 80a1174:	4604      	mov	r4, r0
 80a1176:	6831      	ldr	r1, [r6, #0]
 80a1178:	f011 0501 	ands.w	r5, r1, #1
 80a117c:	d10f      	bne.n	80a119e <pinAvailable+0x2e>
 80a117e:	4630      	mov	r0, r6
 80a1180:	f7fe ff8f 	bl	80a00a2 <__cxa_guard_acquire>
 80a1184:	b158      	cbz	r0, 80a119e <pinAvailable+0x2e>
 80a1186:	4629      	mov	r1, r5
 80a1188:	4815      	ldr	r0, [pc, #84]	; (80a11e0 <pinAvailable+0x70>)
 80a118a:	f7ff faef 	bl	80a076c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a118e:	4630      	mov	r0, r6
 80a1190:	f7fe ff8c 	bl	80a00ac <__cxa_guard_release>
 80a1194:	4a13      	ldr	r2, [pc, #76]	; (80a11e4 <pinAvailable+0x74>)
 80a1196:	4914      	ldr	r1, [pc, #80]	; (80a11e8 <pinAvailable+0x78>)
 80a1198:	4811      	ldr	r0, [pc, #68]	; (80a11e0 <pinAvailable+0x70>)
 80a119a:	f000 f8bd 	bl	80a1318 <__aeabi_atexit>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
 80a119e:	4810      	ldr	r0, [pc, #64]	; (80a11e0 <pinAvailable+0x70>)
 80a11a0:	f7ff faf3 	bl	80a078a <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a11a4:	b128      	cbz	r0, 80a11b2 <pinAvailable+0x42>
 80a11a6:	f1a4 030d 	sub.w	r3, r4, #13
 80a11aa:	2b02      	cmp	r3, #2
 80a11ac:	d801      	bhi.n	80a11b2 <pinAvailable+0x42>
  {
    return 0; // 'pin' is used
 80a11ae:	2000      	movs	r0, #0
 80a11b0:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a11b2:	f000 f88b 	bl	80a12cc <_Z19__fetch_global_Wirev>
 80a11b6:	f7ff ff0f 	bl	80a0fd8 <_ZN7TwoWire9isEnabledEv>
 80a11ba:	b108      	cbz	r0, 80a11c0 <pinAvailable+0x50>
 80a11bc:	2c01      	cmp	r4, #1
 80a11be:	d9f6      	bls.n	80a11ae <pinAvailable+0x3e>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a11c0:	f7ff fea6 	bl	80a0f10 <_Z22__fetch_global_Serial1v>
 80a11c4:	f7ff fea0 	bl	80a0f08 <_ZN11USARTSerial9isEnabledEv>
 80a11c8:	b118      	cbz	r0, 80a11d2 <pinAvailable+0x62>
 80a11ca:	f1a4 0312 	sub.w	r3, r4, #18
 80a11ce:	2b01      	cmp	r3, #1
 80a11d0:	d9ed      	bls.n	80a11ae <pinAvailable+0x3e>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a11d2:	2c17      	cmp	r4, #23
 80a11d4:	bf8c      	ite	hi
 80a11d6:	2000      	movhi	r0, #0
 80a11d8:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a11da:	bd70      	pop	{r4, r5, r6, pc}
 80a11dc:	2000051c 	.word	0x2000051c
 80a11e0:	20000520 	.word	0x20000520
 80a11e4:	2000006c 	.word	0x2000006c
 80a11e8:	080a1161 	.word	0x080a1161

080a11ec <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a11ec:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a11ee:	b538      	push	{r3, r4, r5, lr}
 80a11f0:	4604      	mov	r4, r0
 80a11f2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a11f4:	d80a      	bhi.n	80a120c <pinMode+0x20>
 80a11f6:	29ff      	cmp	r1, #255	; 0xff
 80a11f8:	d008      	beq.n	80a120c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a11fa:	f7ff ffb9 	bl	80a1170 <pinAvailable>
 80a11fe:	b128      	cbz	r0, 80a120c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1200:	4629      	mov	r1, r5
 80a1202:	4620      	mov	r0, r4
}
 80a1204:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1208:	f7ff b902 	b.w	80a0410 <HAL_Pin_Mode>
 80a120c:	bd38      	pop	{r3, r4, r5, pc}

080a120e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a120e:	b538      	push	{r3, r4, r5, lr}
 80a1210:	4604      	mov	r4, r0
 80a1212:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a1214:	f7ff f904 	bl	80a0420 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a1218:	28ff      	cmp	r0, #255	; 0xff
 80a121a:	d010      	beq.n	80a123e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a121c:	2806      	cmp	r0, #6
 80a121e:	d804      	bhi.n	80a122a <digitalWrite+0x1c>
 80a1220:	234d      	movs	r3, #77	; 0x4d
 80a1222:	fa23 f000 	lsr.w	r0, r3, r0
 80a1226:	07c3      	lsls	r3, r0, #31
 80a1228:	d409      	bmi.n	80a123e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a122a:	4620      	mov	r0, r4
 80a122c:	f7ff ffa0 	bl	80a1170 <pinAvailable>
 80a1230:	b128      	cbz	r0, 80a123e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a1232:	4629      	mov	r1, r5
 80a1234:	4620      	mov	r0, r4
}
 80a1236:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a123a:	f7ff b8f9 	b.w	80a0430 <HAL_GPIO_Write>
 80a123e:	bd38      	pop	{r3, r4, r5, pc}

080a1240 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a1240:	b510      	push	{r4, lr}
 80a1242:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a1244:	f7ff f8ec 	bl	80a0420 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a1248:	3804      	subs	r0, #4
 80a124a:	b2c0      	uxtb	r0, r0
 80a124c:	2801      	cmp	r0, #1
 80a124e:	d908      	bls.n	80a1262 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a1250:	4620      	mov	r0, r4
 80a1252:	f7ff ff8d 	bl	80a1170 <pinAvailable>
 80a1256:	b120      	cbz	r0, 80a1262 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a1258:	4620      	mov	r0, r4
}
 80a125a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a125e:	f7ff b8ef 	b.w	80a0440 <HAL_GPIO_Read>
}
 80a1262:	2000      	movs	r0, #0
 80a1264:	bd10      	pop	{r4, pc}
	...

080a1268 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a1268:	b513      	push	{r0, r1, r4, lr}
 80a126a:	4c08      	ldr	r4, [pc, #32]	; (80a128c <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a126c:	2300      	movs	r3, #0
 80a126e:	461a      	mov	r2, r3
 80a1270:	4619      	mov	r1, r3
 80a1272:	9300      	str	r3, [sp, #0]
 80a1274:	4620      	mov	r0, r4
 80a1276:	f7ff fd0d 	bl	80a0c94 <_ZN9IPAddressC1Ehhhh>
 80a127a:	4620      	mov	r0, r4
 80a127c:	4a04      	ldr	r2, [pc, #16]	; (80a1290 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a127e:	4905      	ldr	r1, [pc, #20]	; (80a1294 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a1280:	b002      	add	sp, #8
 80a1282:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1286:	f000 b847 	b.w	80a1318 <__aeabi_atexit>
 80a128a:	bf00      	nop
 80a128c:	20000530 	.word	0x20000530
 80a1290:	2000006c 	.word	0x2000006c
 80a1294:	080a0be5 	.word	0x080a0be5

080a1298 <_Z17acquireWireBufferv>:
}

} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
 80a1298:	b570      	push	{r4, r5, r6, lr}
 80a129a:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a129c:	2514      	movs	r5, #20
 80a129e:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a12a0:	4e09      	ldr	r6, [pc, #36]	; (80a12c8 <_Z17acquireWireBufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a12a2:	2100      	movs	r1, #0
 80a12a4:	f001 f92f 	bl	80a2506 <memset>
 80a12a8:	8025      	strh	r5, [r4, #0]
 80a12aa:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a12ac:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a12ae:	60a5      	str	r5, [r4, #8]
 80a12b0:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a12b2:	4628      	mov	r0, r5
 80a12b4:	f000 f840 	bl	80a1338 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a12b8:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a12ba:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a12bc:	4628      	mov	r0, r5
 80a12be:	f000 f83b 	bl	80a1338 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a12c2:	60e0      	str	r0, [r4, #12]
} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
	return defaultWireConfig();
}
 80a12c4:	4620      	mov	r0, r4
 80a12c6:	bd70      	pop	{r4, r5, r6, pc}
 80a12c8:	080a27ec 	.word	0x080a27ec

080a12cc <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a12cc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a12ce:	4d0e      	ldr	r5, [pc, #56]	; (80a1308 <_Z19__fetch_global_Wirev+0x3c>)
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a12d0:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a12d2:	6829      	ldr	r1, [r5, #0]
 80a12d4:	f011 0401 	ands.w	r4, r1, #1
 80a12d8:	d113      	bne.n	80a1302 <_Z19__fetch_global_Wirev+0x36>
 80a12da:	4628      	mov	r0, r5
 80a12dc:	f7fe fee1 	bl	80a00a2 <__cxa_guard_acquire>
 80a12e0:	b178      	cbz	r0, 80a1302 <_Z19__fetch_global_Wirev+0x36>
 80a12e2:	a801      	add	r0, sp, #4
 80a12e4:	f7ff ffd8 	bl	80a1298 <_Z17acquireWireBufferv>
 80a12e8:	aa01      	add	r2, sp, #4
 80a12ea:	4621      	mov	r1, r4
 80a12ec:	4807      	ldr	r0, [pc, #28]	; (80a130c <_Z19__fetch_global_Wirev+0x40>)
 80a12ee:	f7ff fe61 	bl	80a0fb4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 80a12f2:	4628      	mov	r0, r5
 80a12f4:	f7fe feda 	bl	80a00ac <__cxa_guard_release>
 80a12f8:	4a05      	ldr	r2, [pc, #20]	; (80a1310 <_Z19__fetch_global_Wirev+0x44>)
 80a12fa:	4906      	ldr	r1, [pc, #24]	; (80a1314 <_Z19__fetch_global_Wirev+0x48>)
 80a12fc:	4803      	ldr	r0, [pc, #12]	; (80a130c <_Z19__fetch_global_Wirev+0x40>)
 80a12fe:	f000 f80b 	bl	80a1318 <__aeabi_atexit>
	return wire;
}
 80a1302:	4802      	ldr	r0, [pc, #8]	; (80a130c <_Z19__fetch_global_Wirev+0x40>)
 80a1304:	b007      	add	sp, #28
 80a1306:	bd30      	pop	{r4, r5, pc}
 80a1308:	20000548 	.word	0x20000548
 80a130c:	2000054c 	.word	0x2000054c
 80a1310:	2000006c 	.word	0x2000006c
 80a1314:	080a0f5d 	.word	0x080a0f5d

080a1318 <__aeabi_atexit>:
 80a1318:	460b      	mov	r3, r1
 80a131a:	4601      	mov	r1, r0
 80a131c:	4618      	mov	r0, r3
 80a131e:	f001 b8d9 	b.w	80a24d4 <__cxa_atexit>
	...

080a1324 <_ZSt15get_new_handlerv>:
 80a1324:	4b02      	ldr	r3, [pc, #8]	; (80a1330 <_ZSt15get_new_handlerv+0xc>)
 80a1326:	6818      	ldr	r0, [r3, #0]
 80a1328:	f3bf 8f5f 	dmb	sy
 80a132c:	4770      	bx	lr
 80a132e:	bf00      	nop
 80a1330:	20000560 	.word	0x20000560

080a1334 <_ZdlPvj>:
 80a1334:	f7fe beb3 	b.w	80a009e <_ZdlPv>

080a1338 <_ZnajRKSt9nothrow_t>:
 80a1338:	f000 b800 	b.w	80a133c <_ZnwjRKSt9nothrow_t>

080a133c <_ZnwjRKSt9nothrow_t>:
 80a133c:	b510      	push	{r4, lr}
 80a133e:	2800      	cmp	r0, #0
 80a1340:	bf14      	ite	ne
 80a1342:	4604      	movne	r4, r0
 80a1344:	2401      	moveq	r4, #1
 80a1346:	4620      	mov	r0, r4
 80a1348:	f7ff fa00 	bl	80a074c <malloc>
 80a134c:	b920      	cbnz	r0, 80a1358 <_ZnwjRKSt9nothrow_t+0x1c>
 80a134e:	f7ff ffe9 	bl	80a1324 <_ZSt15get_new_handlerv>
 80a1352:	b108      	cbz	r0, 80a1358 <_ZnwjRKSt9nothrow_t+0x1c>
 80a1354:	4780      	blx	r0
 80a1356:	e7f6      	b.n	80a1346 <_ZnwjRKSt9nothrow_t+0xa>
 80a1358:	bd10      	pop	{r4, pc}
	...

080a135c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a135c:	4b18      	ldr	r3, [pc, #96]	; (80a13c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a135e:	681a      	ldr	r2, [r3, #0]
 80a1360:	07d1      	lsls	r1, r2, #31
 80a1362:	bf5c      	itt	pl
 80a1364:	2201      	movpl	r2, #1
 80a1366:	601a      	strpl	r2, [r3, #0]
 80a1368:	4b16      	ldr	r3, [pc, #88]	; (80a13c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a136a:	681a      	ldr	r2, [r3, #0]
 80a136c:	07d2      	lsls	r2, r2, #31
 80a136e:	bf5c      	itt	pl
 80a1370:	2201      	movpl	r2, #1
 80a1372:	601a      	strpl	r2, [r3, #0]
 80a1374:	4b14      	ldr	r3, [pc, #80]	; (80a13c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1376:	681a      	ldr	r2, [r3, #0]
 80a1378:	07d0      	lsls	r0, r2, #31
 80a137a:	bf5c      	itt	pl
 80a137c:	2201      	movpl	r2, #1
 80a137e:	601a      	strpl	r2, [r3, #0]
 80a1380:	4b12      	ldr	r3, [pc, #72]	; (80a13cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1382:	681a      	ldr	r2, [r3, #0]
 80a1384:	07d1      	lsls	r1, r2, #31
 80a1386:	bf5c      	itt	pl
 80a1388:	2201      	movpl	r2, #1
 80a138a:	601a      	strpl	r2, [r3, #0]
 80a138c:	4b10      	ldr	r3, [pc, #64]	; (80a13d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a138e:	681a      	ldr	r2, [r3, #0]
 80a1390:	07d2      	lsls	r2, r2, #31
 80a1392:	bf5c      	itt	pl
 80a1394:	2201      	movpl	r2, #1
 80a1396:	601a      	strpl	r2, [r3, #0]
 80a1398:	4b0e      	ldr	r3, [pc, #56]	; (80a13d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a139a:	681a      	ldr	r2, [r3, #0]
 80a139c:	07d0      	lsls	r0, r2, #31
 80a139e:	bf5c      	itt	pl
 80a13a0:	2201      	movpl	r2, #1
 80a13a2:	601a      	strpl	r2, [r3, #0]
 80a13a4:	4b0c      	ldr	r3, [pc, #48]	; (80a13d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a13a6:	681a      	ldr	r2, [r3, #0]
 80a13a8:	07d1      	lsls	r1, r2, #31
 80a13aa:	bf5c      	itt	pl
 80a13ac:	2201      	movpl	r2, #1
 80a13ae:	601a      	strpl	r2, [r3, #0]
 80a13b0:	4b0a      	ldr	r3, [pc, #40]	; (80a13dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a13b2:	681a      	ldr	r2, [r3, #0]
 80a13b4:	07d2      	lsls	r2, r2, #31
 80a13b6:	bf5c      	itt	pl
 80a13b8:	2201      	movpl	r2, #1
 80a13ba:	601a      	strpl	r2, [r3, #0]
 80a13bc:	4770      	bx	lr
 80a13be:	bf00      	nop
 80a13c0:	20000580 	.word	0x20000580
 80a13c4:	2000057c 	.word	0x2000057c
 80a13c8:	20000578 	.word	0x20000578
 80a13cc:	20000574 	.word	0x20000574
 80a13d0:	20000570 	.word	0x20000570
 80a13d4:	2000056c 	.word	0x2000056c
 80a13d8:	20000568 	.word	0x20000568
 80a13dc:	20000564 	.word	0x20000564

080a13e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a13e0:	4b24      	ldr	r3, [pc, #144]	; (80a1474 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a13e2:	681a      	ldr	r2, [r3, #0]
 80a13e4:	07d0      	lsls	r0, r2, #31
 80a13e6:	bf5c      	itt	pl
 80a13e8:	2201      	movpl	r2, #1
 80a13ea:	601a      	strpl	r2, [r3, #0]
 80a13ec:	4b22      	ldr	r3, [pc, #136]	; (80a1478 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a13ee:	681a      	ldr	r2, [r3, #0]
 80a13f0:	07d1      	lsls	r1, r2, #31
 80a13f2:	bf5c      	itt	pl
 80a13f4:	2201      	movpl	r2, #1
 80a13f6:	601a      	strpl	r2, [r3, #0]
 80a13f8:	4b20      	ldr	r3, [pc, #128]	; (80a147c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a13fa:	681a      	ldr	r2, [r3, #0]
 80a13fc:	07d2      	lsls	r2, r2, #31
 80a13fe:	bf5c      	itt	pl
 80a1400:	2201      	movpl	r2, #1
 80a1402:	601a      	strpl	r2, [r3, #0]
 80a1404:	4b1e      	ldr	r3, [pc, #120]	; (80a1480 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a1406:	681a      	ldr	r2, [r3, #0]
 80a1408:	07d0      	lsls	r0, r2, #31
 80a140a:	bf5c      	itt	pl
 80a140c:	2201      	movpl	r2, #1
 80a140e:	601a      	strpl	r2, [r3, #0]
 80a1410:	4b1c      	ldr	r3, [pc, #112]	; (80a1484 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a1412:	681a      	ldr	r2, [r3, #0]
 80a1414:	07d1      	lsls	r1, r2, #31
 80a1416:	bf5c      	itt	pl
 80a1418:	2201      	movpl	r2, #1
 80a141a:	601a      	strpl	r2, [r3, #0]
 80a141c:	4b1a      	ldr	r3, [pc, #104]	; (80a1488 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a141e:	681a      	ldr	r2, [r3, #0]
 80a1420:	07d2      	lsls	r2, r2, #31
 80a1422:	bf5c      	itt	pl
 80a1424:	2201      	movpl	r2, #1
 80a1426:	601a      	strpl	r2, [r3, #0]
 80a1428:	4b18      	ldr	r3, [pc, #96]	; (80a148c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a142a:	681a      	ldr	r2, [r3, #0]
 80a142c:	07d0      	lsls	r0, r2, #31
 80a142e:	bf5c      	itt	pl
 80a1430:	2201      	movpl	r2, #1
 80a1432:	601a      	strpl	r2, [r3, #0]
 80a1434:	4b16      	ldr	r3, [pc, #88]	; (80a1490 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a1436:	681a      	ldr	r2, [r3, #0]
 80a1438:	07d1      	lsls	r1, r2, #31
 80a143a:	bf5c      	itt	pl
 80a143c:	2201      	movpl	r2, #1
 80a143e:	601a      	strpl	r2, [r3, #0]
 80a1440:	4b14      	ldr	r3, [pc, #80]	; (80a1494 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a1442:	681a      	ldr	r2, [r3, #0]
 80a1444:	07d2      	lsls	r2, r2, #31
 80a1446:	bf5c      	itt	pl
 80a1448:	2201      	movpl	r2, #1
 80a144a:	601a      	strpl	r2, [r3, #0]
 80a144c:	4b12      	ldr	r3, [pc, #72]	; (80a1498 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a144e:	681a      	ldr	r2, [r3, #0]
 80a1450:	07d0      	lsls	r0, r2, #31
 80a1452:	bf5c      	itt	pl
 80a1454:	2201      	movpl	r2, #1
 80a1456:	601a      	strpl	r2, [r3, #0]
 80a1458:	4b10      	ldr	r3, [pc, #64]	; (80a149c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a145a:	681a      	ldr	r2, [r3, #0]
 80a145c:	07d1      	lsls	r1, r2, #31
 80a145e:	bf5c      	itt	pl
 80a1460:	2201      	movpl	r2, #1
 80a1462:	601a      	strpl	r2, [r3, #0]
 80a1464:	4b0e      	ldr	r3, [pc, #56]	; (80a14a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a1466:	681a      	ldr	r2, [r3, #0]
 80a1468:	07d2      	lsls	r2, r2, #31
 80a146a:	bf5c      	itt	pl
 80a146c:	2201      	movpl	r2, #1
 80a146e:	601a      	strpl	r2, [r3, #0]
 80a1470:	4770      	bx	lr
 80a1472:	bf00      	nop
 80a1474:	200005b0 	.word	0x200005b0
 80a1478:	200005ac 	.word	0x200005ac
 80a147c:	200005a8 	.word	0x200005a8
 80a1480:	200005a4 	.word	0x200005a4
 80a1484:	200005a0 	.word	0x200005a0
 80a1488:	2000059c 	.word	0x2000059c
 80a148c:	20000598 	.word	0x20000598
 80a1490:	20000594 	.word	0x20000594
 80a1494:	20000590 	.word	0x20000590
 80a1498:	2000058c 	.word	0x2000058c
 80a149c:	20000588 	.word	0x20000588
 80a14a0:	20000584 	.word	0x20000584

080a14a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a14a4:	4b24      	ldr	r3, [pc, #144]	; (80a1538 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a14a6:	681a      	ldr	r2, [r3, #0]
 80a14a8:	07d0      	lsls	r0, r2, #31
 80a14aa:	bf5c      	itt	pl
 80a14ac:	2201      	movpl	r2, #1
 80a14ae:	601a      	strpl	r2, [r3, #0]
 80a14b0:	4b22      	ldr	r3, [pc, #136]	; (80a153c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a14b2:	681a      	ldr	r2, [r3, #0]
 80a14b4:	07d1      	lsls	r1, r2, #31
 80a14b6:	bf5c      	itt	pl
 80a14b8:	2201      	movpl	r2, #1
 80a14ba:	601a      	strpl	r2, [r3, #0]
 80a14bc:	4b20      	ldr	r3, [pc, #128]	; (80a1540 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a14be:	681a      	ldr	r2, [r3, #0]
 80a14c0:	07d2      	lsls	r2, r2, #31
 80a14c2:	bf5c      	itt	pl
 80a14c4:	2201      	movpl	r2, #1
 80a14c6:	601a      	strpl	r2, [r3, #0]
 80a14c8:	4b1e      	ldr	r3, [pc, #120]	; (80a1544 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a14ca:	681a      	ldr	r2, [r3, #0]
 80a14cc:	07d0      	lsls	r0, r2, #31
 80a14ce:	bf5c      	itt	pl
 80a14d0:	2201      	movpl	r2, #1
 80a14d2:	601a      	strpl	r2, [r3, #0]
 80a14d4:	4b1c      	ldr	r3, [pc, #112]	; (80a1548 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a14d6:	681a      	ldr	r2, [r3, #0]
 80a14d8:	07d1      	lsls	r1, r2, #31
 80a14da:	bf5c      	itt	pl
 80a14dc:	2201      	movpl	r2, #1
 80a14de:	601a      	strpl	r2, [r3, #0]
 80a14e0:	4b1a      	ldr	r3, [pc, #104]	; (80a154c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a14e2:	681a      	ldr	r2, [r3, #0]
 80a14e4:	07d2      	lsls	r2, r2, #31
 80a14e6:	bf5c      	itt	pl
 80a14e8:	2201      	movpl	r2, #1
 80a14ea:	601a      	strpl	r2, [r3, #0]
 80a14ec:	4b18      	ldr	r3, [pc, #96]	; (80a1550 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a14ee:	681a      	ldr	r2, [r3, #0]
 80a14f0:	07d0      	lsls	r0, r2, #31
 80a14f2:	bf5c      	itt	pl
 80a14f4:	2201      	movpl	r2, #1
 80a14f6:	601a      	strpl	r2, [r3, #0]
 80a14f8:	4b16      	ldr	r3, [pc, #88]	; (80a1554 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a14fa:	681a      	ldr	r2, [r3, #0]
 80a14fc:	07d1      	lsls	r1, r2, #31
 80a14fe:	bf5c      	itt	pl
 80a1500:	2201      	movpl	r2, #1
 80a1502:	601a      	strpl	r2, [r3, #0]
 80a1504:	4b14      	ldr	r3, [pc, #80]	; (80a1558 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a1506:	681a      	ldr	r2, [r3, #0]
 80a1508:	07d2      	lsls	r2, r2, #31
 80a150a:	bf5c      	itt	pl
 80a150c:	2201      	movpl	r2, #1
 80a150e:	601a      	strpl	r2, [r3, #0]
 80a1510:	4b12      	ldr	r3, [pc, #72]	; (80a155c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a1512:	681a      	ldr	r2, [r3, #0]
 80a1514:	07d0      	lsls	r0, r2, #31
 80a1516:	bf5c      	itt	pl
 80a1518:	2201      	movpl	r2, #1
 80a151a:	601a      	strpl	r2, [r3, #0]
 80a151c:	4b10      	ldr	r3, [pc, #64]	; (80a1560 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a151e:	681a      	ldr	r2, [r3, #0]
 80a1520:	07d1      	lsls	r1, r2, #31
 80a1522:	bf5c      	itt	pl
 80a1524:	2201      	movpl	r2, #1
 80a1526:	601a      	strpl	r2, [r3, #0]
 80a1528:	4b0e      	ldr	r3, [pc, #56]	; (80a1564 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a152a:	681a      	ldr	r2, [r3, #0]
 80a152c:	07d2      	lsls	r2, r2, #31
 80a152e:	bf5c      	itt	pl
 80a1530:	2201      	movpl	r2, #1
 80a1532:	601a      	strpl	r2, [r3, #0]
 80a1534:	4770      	bx	lr
 80a1536:	bf00      	nop
 80a1538:	200005e0 	.word	0x200005e0
 80a153c:	200005dc 	.word	0x200005dc
 80a1540:	200005d8 	.word	0x200005d8
 80a1544:	200005d4 	.word	0x200005d4
 80a1548:	200005d0 	.word	0x200005d0
 80a154c:	200005cc 	.word	0x200005cc
 80a1550:	200005c8 	.word	0x200005c8
 80a1554:	200005c4 	.word	0x200005c4
 80a1558:	200005c0 	.word	0x200005c0
 80a155c:	200005bc 	.word	0x200005bc
 80a1560:	200005b8 	.word	0x200005b8
 80a1564:	200005b4 	.word	0x200005b4

080a1568 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1568:	4b18      	ldr	r3, [pc, #96]	; (80a15cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a156a:	681a      	ldr	r2, [r3, #0]
 80a156c:	07d1      	lsls	r1, r2, #31
 80a156e:	bf5c      	itt	pl
 80a1570:	2201      	movpl	r2, #1
 80a1572:	601a      	strpl	r2, [r3, #0]
 80a1574:	4b16      	ldr	r3, [pc, #88]	; (80a15d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1576:	681a      	ldr	r2, [r3, #0]
 80a1578:	07d2      	lsls	r2, r2, #31
 80a157a:	bf5c      	itt	pl
 80a157c:	2201      	movpl	r2, #1
 80a157e:	601a      	strpl	r2, [r3, #0]
 80a1580:	4b14      	ldr	r3, [pc, #80]	; (80a15d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1582:	681a      	ldr	r2, [r3, #0]
 80a1584:	07d0      	lsls	r0, r2, #31
 80a1586:	bf5c      	itt	pl
 80a1588:	2201      	movpl	r2, #1
 80a158a:	601a      	strpl	r2, [r3, #0]
 80a158c:	4b12      	ldr	r3, [pc, #72]	; (80a15d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a158e:	681a      	ldr	r2, [r3, #0]
 80a1590:	07d1      	lsls	r1, r2, #31
 80a1592:	bf5c      	itt	pl
 80a1594:	2201      	movpl	r2, #1
 80a1596:	601a      	strpl	r2, [r3, #0]
 80a1598:	4b10      	ldr	r3, [pc, #64]	; (80a15dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a159a:	681a      	ldr	r2, [r3, #0]
 80a159c:	07d2      	lsls	r2, r2, #31
 80a159e:	bf5c      	itt	pl
 80a15a0:	2201      	movpl	r2, #1
 80a15a2:	601a      	strpl	r2, [r3, #0]
 80a15a4:	4b0e      	ldr	r3, [pc, #56]	; (80a15e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a15a6:	681a      	ldr	r2, [r3, #0]
 80a15a8:	07d0      	lsls	r0, r2, #31
 80a15aa:	bf5c      	itt	pl
 80a15ac:	2201      	movpl	r2, #1
 80a15ae:	601a      	strpl	r2, [r3, #0]
 80a15b0:	4b0c      	ldr	r3, [pc, #48]	; (80a15e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a15b2:	681a      	ldr	r2, [r3, #0]
 80a15b4:	07d1      	lsls	r1, r2, #31
 80a15b6:	bf5c      	itt	pl
 80a15b8:	2201      	movpl	r2, #1
 80a15ba:	601a      	strpl	r2, [r3, #0]
 80a15bc:	4b0a      	ldr	r3, [pc, #40]	; (80a15e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a15be:	681a      	ldr	r2, [r3, #0]
 80a15c0:	07d2      	lsls	r2, r2, #31
 80a15c2:	bf5c      	itt	pl
 80a15c4:	2201      	movpl	r2, #1
 80a15c6:	601a      	strpl	r2, [r3, #0]
 80a15c8:	4770      	bx	lr
 80a15ca:	bf00      	nop
 80a15cc:	20000600 	.word	0x20000600
 80a15d0:	200005fc 	.word	0x200005fc
 80a15d4:	200005f8 	.word	0x200005f8
 80a15d8:	200005f4 	.word	0x200005f4
 80a15dc:	200005f0 	.word	0x200005f0
 80a15e0:	200005ec 	.word	0x200005ec
 80a15e4:	200005e8 	.word	0x200005e8
 80a15e8:	200005e4 	.word	0x200005e4

080a15ec <__aeabi_drsub>:
 80a15ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a15f0:	e002      	b.n	80a15f8 <__adddf3>
 80a15f2:	bf00      	nop

080a15f4 <__aeabi_dsub>:
 80a15f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a15f8 <__adddf3>:
 80a15f8:	b530      	push	{r4, r5, lr}
 80a15fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a15fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a1602:	ea94 0f05 	teq	r4, r5
 80a1606:	bf08      	it	eq
 80a1608:	ea90 0f02 	teqeq	r0, r2
 80a160c:	bf1f      	itttt	ne
 80a160e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a1612:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a1616:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a161a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a161e:	f000 80e2 	beq.w	80a17e6 <__adddf3+0x1ee>
 80a1622:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a1626:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a162a:	bfb8      	it	lt
 80a162c:	426d      	neglt	r5, r5
 80a162e:	dd0c      	ble.n	80a164a <__adddf3+0x52>
 80a1630:	442c      	add	r4, r5
 80a1632:	ea80 0202 	eor.w	r2, r0, r2
 80a1636:	ea81 0303 	eor.w	r3, r1, r3
 80a163a:	ea82 0000 	eor.w	r0, r2, r0
 80a163e:	ea83 0101 	eor.w	r1, r3, r1
 80a1642:	ea80 0202 	eor.w	r2, r0, r2
 80a1646:	ea81 0303 	eor.w	r3, r1, r3
 80a164a:	2d36      	cmp	r5, #54	; 0x36
 80a164c:	bf88      	it	hi
 80a164e:	bd30      	pophi	{r4, r5, pc}
 80a1650:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a1654:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a1658:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a165c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a1660:	d002      	beq.n	80a1668 <__adddf3+0x70>
 80a1662:	4240      	negs	r0, r0
 80a1664:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1668:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a166c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a1670:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a1674:	d002      	beq.n	80a167c <__adddf3+0x84>
 80a1676:	4252      	negs	r2, r2
 80a1678:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a167c:	ea94 0f05 	teq	r4, r5
 80a1680:	f000 80a7 	beq.w	80a17d2 <__adddf3+0x1da>
 80a1684:	f1a4 0401 	sub.w	r4, r4, #1
 80a1688:	f1d5 0e20 	rsbs	lr, r5, #32
 80a168c:	db0d      	blt.n	80a16aa <__adddf3+0xb2>
 80a168e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a1692:	fa22 f205 	lsr.w	r2, r2, r5
 80a1696:	1880      	adds	r0, r0, r2
 80a1698:	f141 0100 	adc.w	r1, r1, #0
 80a169c:	fa03 f20e 	lsl.w	r2, r3, lr
 80a16a0:	1880      	adds	r0, r0, r2
 80a16a2:	fa43 f305 	asr.w	r3, r3, r5
 80a16a6:	4159      	adcs	r1, r3
 80a16a8:	e00e      	b.n	80a16c8 <__adddf3+0xd0>
 80a16aa:	f1a5 0520 	sub.w	r5, r5, #32
 80a16ae:	f10e 0e20 	add.w	lr, lr, #32
 80a16b2:	2a01      	cmp	r2, #1
 80a16b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a16b8:	bf28      	it	cs
 80a16ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a16be:	fa43 f305 	asr.w	r3, r3, r5
 80a16c2:	18c0      	adds	r0, r0, r3
 80a16c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a16c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a16cc:	d507      	bpl.n	80a16de <__adddf3+0xe6>
 80a16ce:	f04f 0e00 	mov.w	lr, #0
 80a16d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80a16d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a16da:	eb6e 0101 	sbc.w	r1, lr, r1
 80a16de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a16e2:	d31b      	bcc.n	80a171c <__adddf3+0x124>
 80a16e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a16e8:	d30c      	bcc.n	80a1704 <__adddf3+0x10c>
 80a16ea:	0849      	lsrs	r1, r1, #1
 80a16ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80a16f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a16f4:	f104 0401 	add.w	r4, r4, #1
 80a16f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a16fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a1700:	f080 809a 	bcs.w	80a1838 <__adddf3+0x240>
 80a1704:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a1708:	bf08      	it	eq
 80a170a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a170e:	f150 0000 	adcs.w	r0, r0, #0
 80a1712:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a1716:	ea41 0105 	orr.w	r1, r1, r5
 80a171a:	bd30      	pop	{r4, r5, pc}
 80a171c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a1720:	4140      	adcs	r0, r0
 80a1722:	eb41 0101 	adc.w	r1, r1, r1
 80a1726:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a172a:	f1a4 0401 	sub.w	r4, r4, #1
 80a172e:	d1e9      	bne.n	80a1704 <__adddf3+0x10c>
 80a1730:	f091 0f00 	teq	r1, #0
 80a1734:	bf04      	itt	eq
 80a1736:	4601      	moveq	r1, r0
 80a1738:	2000      	moveq	r0, #0
 80a173a:	fab1 f381 	clz	r3, r1
 80a173e:	bf08      	it	eq
 80a1740:	3320      	addeq	r3, #32
 80a1742:	f1a3 030b 	sub.w	r3, r3, #11
 80a1746:	f1b3 0220 	subs.w	r2, r3, #32
 80a174a:	da0c      	bge.n	80a1766 <__adddf3+0x16e>
 80a174c:	320c      	adds	r2, #12
 80a174e:	dd08      	ble.n	80a1762 <__adddf3+0x16a>
 80a1750:	f102 0c14 	add.w	ip, r2, #20
 80a1754:	f1c2 020c 	rsb	r2, r2, #12
 80a1758:	fa01 f00c 	lsl.w	r0, r1, ip
 80a175c:	fa21 f102 	lsr.w	r1, r1, r2
 80a1760:	e00c      	b.n	80a177c <__adddf3+0x184>
 80a1762:	f102 0214 	add.w	r2, r2, #20
 80a1766:	bfd8      	it	le
 80a1768:	f1c2 0c20 	rsble	ip, r2, #32
 80a176c:	fa01 f102 	lsl.w	r1, r1, r2
 80a1770:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a1774:	bfdc      	itt	le
 80a1776:	ea41 010c 	orrle.w	r1, r1, ip
 80a177a:	4090      	lslle	r0, r2
 80a177c:	1ae4      	subs	r4, r4, r3
 80a177e:	bfa2      	ittt	ge
 80a1780:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a1784:	4329      	orrge	r1, r5
 80a1786:	bd30      	popge	{r4, r5, pc}
 80a1788:	ea6f 0404 	mvn.w	r4, r4
 80a178c:	3c1f      	subs	r4, #31
 80a178e:	da1c      	bge.n	80a17ca <__adddf3+0x1d2>
 80a1790:	340c      	adds	r4, #12
 80a1792:	dc0e      	bgt.n	80a17b2 <__adddf3+0x1ba>
 80a1794:	f104 0414 	add.w	r4, r4, #20
 80a1798:	f1c4 0220 	rsb	r2, r4, #32
 80a179c:	fa20 f004 	lsr.w	r0, r0, r4
 80a17a0:	fa01 f302 	lsl.w	r3, r1, r2
 80a17a4:	ea40 0003 	orr.w	r0, r0, r3
 80a17a8:	fa21 f304 	lsr.w	r3, r1, r4
 80a17ac:	ea45 0103 	orr.w	r1, r5, r3
 80a17b0:	bd30      	pop	{r4, r5, pc}
 80a17b2:	f1c4 040c 	rsb	r4, r4, #12
 80a17b6:	f1c4 0220 	rsb	r2, r4, #32
 80a17ba:	fa20 f002 	lsr.w	r0, r0, r2
 80a17be:	fa01 f304 	lsl.w	r3, r1, r4
 80a17c2:	ea40 0003 	orr.w	r0, r0, r3
 80a17c6:	4629      	mov	r1, r5
 80a17c8:	bd30      	pop	{r4, r5, pc}
 80a17ca:	fa21 f004 	lsr.w	r0, r1, r4
 80a17ce:	4629      	mov	r1, r5
 80a17d0:	bd30      	pop	{r4, r5, pc}
 80a17d2:	f094 0f00 	teq	r4, #0
 80a17d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a17da:	bf06      	itte	eq
 80a17dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a17e0:	3401      	addeq	r4, #1
 80a17e2:	3d01      	subne	r5, #1
 80a17e4:	e74e      	b.n	80a1684 <__adddf3+0x8c>
 80a17e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a17ea:	bf18      	it	ne
 80a17ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a17f0:	d029      	beq.n	80a1846 <__adddf3+0x24e>
 80a17f2:	ea94 0f05 	teq	r4, r5
 80a17f6:	bf08      	it	eq
 80a17f8:	ea90 0f02 	teqeq	r0, r2
 80a17fc:	d005      	beq.n	80a180a <__adddf3+0x212>
 80a17fe:	ea54 0c00 	orrs.w	ip, r4, r0
 80a1802:	bf04      	itt	eq
 80a1804:	4619      	moveq	r1, r3
 80a1806:	4610      	moveq	r0, r2
 80a1808:	bd30      	pop	{r4, r5, pc}
 80a180a:	ea91 0f03 	teq	r1, r3
 80a180e:	bf1e      	ittt	ne
 80a1810:	2100      	movne	r1, #0
 80a1812:	2000      	movne	r0, #0
 80a1814:	bd30      	popne	{r4, r5, pc}
 80a1816:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a181a:	d105      	bne.n	80a1828 <__adddf3+0x230>
 80a181c:	0040      	lsls	r0, r0, #1
 80a181e:	4149      	adcs	r1, r1
 80a1820:	bf28      	it	cs
 80a1822:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a1826:	bd30      	pop	{r4, r5, pc}
 80a1828:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a182c:	bf3c      	itt	cc
 80a182e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a1832:	bd30      	popcc	{r4, r5, pc}
 80a1834:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1838:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a183c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a1840:	f04f 0000 	mov.w	r0, #0
 80a1844:	bd30      	pop	{r4, r5, pc}
 80a1846:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a184a:	bf1a      	itte	ne
 80a184c:	4619      	movne	r1, r3
 80a184e:	4610      	movne	r0, r2
 80a1850:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a1854:	bf1c      	itt	ne
 80a1856:	460b      	movne	r3, r1
 80a1858:	4602      	movne	r2, r0
 80a185a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a185e:	bf06      	itte	eq
 80a1860:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a1864:	ea91 0f03 	teqeq	r1, r3
 80a1868:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a186c:	bd30      	pop	{r4, r5, pc}
 80a186e:	bf00      	nop

080a1870 <__aeabi_ui2d>:
 80a1870:	f090 0f00 	teq	r0, #0
 80a1874:	bf04      	itt	eq
 80a1876:	2100      	moveq	r1, #0
 80a1878:	4770      	bxeq	lr
 80a187a:	b530      	push	{r4, r5, lr}
 80a187c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1880:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1884:	f04f 0500 	mov.w	r5, #0
 80a1888:	f04f 0100 	mov.w	r1, #0
 80a188c:	e750      	b.n	80a1730 <__adddf3+0x138>
 80a188e:	bf00      	nop

080a1890 <__aeabi_i2d>:
 80a1890:	f090 0f00 	teq	r0, #0
 80a1894:	bf04      	itt	eq
 80a1896:	2100      	moveq	r1, #0
 80a1898:	4770      	bxeq	lr
 80a189a:	b530      	push	{r4, r5, lr}
 80a189c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a18a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a18a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a18a8:	bf48      	it	mi
 80a18aa:	4240      	negmi	r0, r0
 80a18ac:	f04f 0100 	mov.w	r1, #0
 80a18b0:	e73e      	b.n	80a1730 <__adddf3+0x138>
 80a18b2:	bf00      	nop

080a18b4 <__aeabi_f2d>:
 80a18b4:	0042      	lsls	r2, r0, #1
 80a18b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a18ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80a18be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a18c2:	bf1f      	itttt	ne
 80a18c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a18c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a18cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a18d0:	4770      	bxne	lr
 80a18d2:	f092 0f00 	teq	r2, #0
 80a18d6:	bf14      	ite	ne
 80a18d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a18dc:	4770      	bxeq	lr
 80a18de:	b530      	push	{r4, r5, lr}
 80a18e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a18e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a18e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a18ec:	e720      	b.n	80a1730 <__adddf3+0x138>
 80a18ee:	bf00      	nop

080a18f0 <__aeabi_ul2d>:
 80a18f0:	ea50 0201 	orrs.w	r2, r0, r1
 80a18f4:	bf08      	it	eq
 80a18f6:	4770      	bxeq	lr
 80a18f8:	b530      	push	{r4, r5, lr}
 80a18fa:	f04f 0500 	mov.w	r5, #0
 80a18fe:	e00a      	b.n	80a1916 <__aeabi_l2d+0x16>

080a1900 <__aeabi_l2d>:
 80a1900:	ea50 0201 	orrs.w	r2, r0, r1
 80a1904:	bf08      	it	eq
 80a1906:	4770      	bxeq	lr
 80a1908:	b530      	push	{r4, r5, lr}
 80a190a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a190e:	d502      	bpl.n	80a1916 <__aeabi_l2d+0x16>
 80a1910:	4240      	negs	r0, r0
 80a1912:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1916:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a191a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a191e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a1922:	f43f aedc 	beq.w	80a16de <__adddf3+0xe6>
 80a1926:	f04f 0203 	mov.w	r2, #3
 80a192a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a192e:	bf18      	it	ne
 80a1930:	3203      	addne	r2, #3
 80a1932:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a1936:	bf18      	it	ne
 80a1938:	3203      	addne	r2, #3
 80a193a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a193e:	f1c2 0320 	rsb	r3, r2, #32
 80a1942:	fa00 fc03 	lsl.w	ip, r0, r3
 80a1946:	fa20 f002 	lsr.w	r0, r0, r2
 80a194a:	fa01 fe03 	lsl.w	lr, r1, r3
 80a194e:	ea40 000e 	orr.w	r0, r0, lr
 80a1952:	fa21 f102 	lsr.w	r1, r1, r2
 80a1956:	4414      	add	r4, r2
 80a1958:	e6c1      	b.n	80a16de <__adddf3+0xe6>
 80a195a:	bf00      	nop

080a195c <__aeabi_dmul>:
 80a195c:	b570      	push	{r4, r5, r6, lr}
 80a195e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a1962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a1966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a196a:	bf1d      	ittte	ne
 80a196c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a1970:	ea94 0f0c 	teqne	r4, ip
 80a1974:	ea95 0f0c 	teqne	r5, ip
 80a1978:	f000 f8de 	bleq	80a1b38 <__aeabi_dmul+0x1dc>
 80a197c:	442c      	add	r4, r5
 80a197e:	ea81 0603 	eor.w	r6, r1, r3
 80a1982:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a1986:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a198a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a198e:	bf18      	it	ne
 80a1990:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a1994:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a1998:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a199c:	d038      	beq.n	80a1a10 <__aeabi_dmul+0xb4>
 80a199e:	fba0 ce02 	umull	ip, lr, r0, r2
 80a19a2:	f04f 0500 	mov.w	r5, #0
 80a19a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a19aa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a19ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a19b2:	f04f 0600 	mov.w	r6, #0
 80a19b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a19ba:	f09c 0f00 	teq	ip, #0
 80a19be:	bf18      	it	ne
 80a19c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80a19c4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a19c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a19cc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a19d0:	d204      	bcs.n	80a19dc <__aeabi_dmul+0x80>
 80a19d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a19d6:	416d      	adcs	r5, r5
 80a19d8:	eb46 0606 	adc.w	r6, r6, r6
 80a19dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a19e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a19e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a19e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a19ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a19f0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a19f4:	bf88      	it	hi
 80a19f6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a19fa:	d81e      	bhi.n	80a1a3a <__aeabi_dmul+0xde>
 80a19fc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a1a00:	bf08      	it	eq
 80a1a02:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a1a06:	f150 0000 	adcs.w	r0, r0, #0
 80a1a0a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a1a0e:	bd70      	pop	{r4, r5, r6, pc}
 80a1a10:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a1a14:	ea46 0101 	orr.w	r1, r6, r1
 80a1a18:	ea40 0002 	orr.w	r0, r0, r2
 80a1a1c:	ea81 0103 	eor.w	r1, r1, r3
 80a1a20:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a1a24:	bfc2      	ittt	gt
 80a1a26:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a1a2a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a1a2e:	bd70      	popgt	{r4, r5, r6, pc}
 80a1a30:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a1a34:	f04f 0e00 	mov.w	lr, #0
 80a1a38:	3c01      	subs	r4, #1
 80a1a3a:	f300 80ab 	bgt.w	80a1b94 <__aeabi_dmul+0x238>
 80a1a3e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a1a42:	bfde      	ittt	le
 80a1a44:	2000      	movle	r0, #0
 80a1a46:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a1a4a:	bd70      	pople	{r4, r5, r6, pc}
 80a1a4c:	f1c4 0400 	rsb	r4, r4, #0
 80a1a50:	3c20      	subs	r4, #32
 80a1a52:	da35      	bge.n	80a1ac0 <__aeabi_dmul+0x164>
 80a1a54:	340c      	adds	r4, #12
 80a1a56:	dc1b      	bgt.n	80a1a90 <__aeabi_dmul+0x134>
 80a1a58:	f104 0414 	add.w	r4, r4, #20
 80a1a5c:	f1c4 0520 	rsb	r5, r4, #32
 80a1a60:	fa00 f305 	lsl.w	r3, r0, r5
 80a1a64:	fa20 f004 	lsr.w	r0, r0, r4
 80a1a68:	fa01 f205 	lsl.w	r2, r1, r5
 80a1a6c:	ea40 0002 	orr.w	r0, r0, r2
 80a1a70:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a1a74:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a1a78:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a1a7c:	fa21 f604 	lsr.w	r6, r1, r4
 80a1a80:	eb42 0106 	adc.w	r1, r2, r6
 80a1a84:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a1a88:	bf08      	it	eq
 80a1a8a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a1a8e:	bd70      	pop	{r4, r5, r6, pc}
 80a1a90:	f1c4 040c 	rsb	r4, r4, #12
 80a1a94:	f1c4 0520 	rsb	r5, r4, #32
 80a1a98:	fa00 f304 	lsl.w	r3, r0, r4
 80a1a9c:	fa20 f005 	lsr.w	r0, r0, r5
 80a1aa0:	fa01 f204 	lsl.w	r2, r1, r4
 80a1aa4:	ea40 0002 	orr.w	r0, r0, r2
 80a1aa8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1aac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a1ab0:	f141 0100 	adc.w	r1, r1, #0
 80a1ab4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a1ab8:	bf08      	it	eq
 80a1aba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a1abe:	bd70      	pop	{r4, r5, r6, pc}
 80a1ac0:	f1c4 0520 	rsb	r5, r4, #32
 80a1ac4:	fa00 f205 	lsl.w	r2, r0, r5
 80a1ac8:	ea4e 0e02 	orr.w	lr, lr, r2
 80a1acc:	fa20 f304 	lsr.w	r3, r0, r4
 80a1ad0:	fa01 f205 	lsl.w	r2, r1, r5
 80a1ad4:	ea43 0302 	orr.w	r3, r3, r2
 80a1ad8:	fa21 f004 	lsr.w	r0, r1, r4
 80a1adc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1ae0:	fa21 f204 	lsr.w	r2, r1, r4
 80a1ae4:	ea20 0002 	bic.w	r0, r0, r2
 80a1ae8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a1aec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a1af0:	bf08      	it	eq
 80a1af2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a1af6:	bd70      	pop	{r4, r5, r6, pc}
 80a1af8:	f094 0f00 	teq	r4, #0
 80a1afc:	d10f      	bne.n	80a1b1e <__aeabi_dmul+0x1c2>
 80a1afe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a1b02:	0040      	lsls	r0, r0, #1
 80a1b04:	eb41 0101 	adc.w	r1, r1, r1
 80a1b08:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a1b0c:	bf08      	it	eq
 80a1b0e:	3c01      	subeq	r4, #1
 80a1b10:	d0f7      	beq.n	80a1b02 <__aeabi_dmul+0x1a6>
 80a1b12:	ea41 0106 	orr.w	r1, r1, r6
 80a1b16:	f095 0f00 	teq	r5, #0
 80a1b1a:	bf18      	it	ne
 80a1b1c:	4770      	bxne	lr
 80a1b1e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a1b22:	0052      	lsls	r2, r2, #1
 80a1b24:	eb43 0303 	adc.w	r3, r3, r3
 80a1b28:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a1b2c:	bf08      	it	eq
 80a1b2e:	3d01      	subeq	r5, #1
 80a1b30:	d0f7      	beq.n	80a1b22 <__aeabi_dmul+0x1c6>
 80a1b32:	ea43 0306 	orr.w	r3, r3, r6
 80a1b36:	4770      	bx	lr
 80a1b38:	ea94 0f0c 	teq	r4, ip
 80a1b3c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a1b40:	bf18      	it	ne
 80a1b42:	ea95 0f0c 	teqne	r5, ip
 80a1b46:	d00c      	beq.n	80a1b62 <__aeabi_dmul+0x206>
 80a1b48:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a1b4c:	bf18      	it	ne
 80a1b4e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a1b52:	d1d1      	bne.n	80a1af8 <__aeabi_dmul+0x19c>
 80a1b54:	ea81 0103 	eor.w	r1, r1, r3
 80a1b58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1b5c:	f04f 0000 	mov.w	r0, #0
 80a1b60:	bd70      	pop	{r4, r5, r6, pc}
 80a1b62:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a1b66:	bf06      	itte	eq
 80a1b68:	4610      	moveq	r0, r2
 80a1b6a:	4619      	moveq	r1, r3
 80a1b6c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a1b70:	d019      	beq.n	80a1ba6 <__aeabi_dmul+0x24a>
 80a1b72:	ea94 0f0c 	teq	r4, ip
 80a1b76:	d102      	bne.n	80a1b7e <__aeabi_dmul+0x222>
 80a1b78:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a1b7c:	d113      	bne.n	80a1ba6 <__aeabi_dmul+0x24a>
 80a1b7e:	ea95 0f0c 	teq	r5, ip
 80a1b82:	d105      	bne.n	80a1b90 <__aeabi_dmul+0x234>
 80a1b84:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a1b88:	bf1c      	itt	ne
 80a1b8a:	4610      	movne	r0, r2
 80a1b8c:	4619      	movne	r1, r3
 80a1b8e:	d10a      	bne.n	80a1ba6 <__aeabi_dmul+0x24a>
 80a1b90:	ea81 0103 	eor.w	r1, r1, r3
 80a1b94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1b98:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a1b9c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a1ba0:	f04f 0000 	mov.w	r0, #0
 80a1ba4:	bd70      	pop	{r4, r5, r6, pc}
 80a1ba6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a1baa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a1bae:	bd70      	pop	{r4, r5, r6, pc}

080a1bb0 <__aeabi_ddiv>:
 80a1bb0:	b570      	push	{r4, r5, r6, lr}
 80a1bb2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a1bb6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a1bba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a1bbe:	bf1d      	ittte	ne
 80a1bc0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a1bc4:	ea94 0f0c 	teqne	r4, ip
 80a1bc8:	ea95 0f0c 	teqne	r5, ip
 80a1bcc:	f000 f8a7 	bleq	80a1d1e <__aeabi_ddiv+0x16e>
 80a1bd0:	eba4 0405 	sub.w	r4, r4, r5
 80a1bd4:	ea81 0e03 	eor.w	lr, r1, r3
 80a1bd8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a1bdc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a1be0:	f000 8088 	beq.w	80a1cf4 <__aeabi_ddiv+0x144>
 80a1be4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a1be8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a1bec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a1bf0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a1bf4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a1bf8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a1bfc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a1c00:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a1c04:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a1c08:	429d      	cmp	r5, r3
 80a1c0a:	bf08      	it	eq
 80a1c0c:	4296      	cmpeq	r6, r2
 80a1c0e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a1c12:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a1c16:	d202      	bcs.n	80a1c1e <__aeabi_ddiv+0x6e>
 80a1c18:	085b      	lsrs	r3, r3, #1
 80a1c1a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a1c1e:	1ab6      	subs	r6, r6, r2
 80a1c20:	eb65 0503 	sbc.w	r5, r5, r3
 80a1c24:	085b      	lsrs	r3, r3, #1
 80a1c26:	ea4f 0232 	mov.w	r2, r2, rrx
 80a1c2a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a1c2e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a1c32:	ebb6 0e02 	subs.w	lr, r6, r2
 80a1c36:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a1c3a:	bf22      	ittt	cs
 80a1c3c:	1ab6      	subcs	r6, r6, r2
 80a1c3e:	4675      	movcs	r5, lr
 80a1c40:	ea40 000c 	orrcs.w	r0, r0, ip
 80a1c44:	085b      	lsrs	r3, r3, #1
 80a1c46:	ea4f 0232 	mov.w	r2, r2, rrx
 80a1c4a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a1c4e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a1c52:	bf22      	ittt	cs
 80a1c54:	1ab6      	subcs	r6, r6, r2
 80a1c56:	4675      	movcs	r5, lr
 80a1c58:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a1c5c:	085b      	lsrs	r3, r3, #1
 80a1c5e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a1c62:	ebb6 0e02 	subs.w	lr, r6, r2
 80a1c66:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a1c6a:	bf22      	ittt	cs
 80a1c6c:	1ab6      	subcs	r6, r6, r2
 80a1c6e:	4675      	movcs	r5, lr
 80a1c70:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a1c74:	085b      	lsrs	r3, r3, #1
 80a1c76:	ea4f 0232 	mov.w	r2, r2, rrx
 80a1c7a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a1c7e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a1c82:	bf22      	ittt	cs
 80a1c84:	1ab6      	subcs	r6, r6, r2
 80a1c86:	4675      	movcs	r5, lr
 80a1c88:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a1c8c:	ea55 0e06 	orrs.w	lr, r5, r6
 80a1c90:	d018      	beq.n	80a1cc4 <__aeabi_ddiv+0x114>
 80a1c92:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a1c96:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a1c9a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a1c9e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a1ca2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a1ca6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a1caa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a1cae:	d1c0      	bne.n	80a1c32 <__aeabi_ddiv+0x82>
 80a1cb0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a1cb4:	d10b      	bne.n	80a1cce <__aeabi_ddiv+0x11e>
 80a1cb6:	ea41 0100 	orr.w	r1, r1, r0
 80a1cba:	f04f 0000 	mov.w	r0, #0
 80a1cbe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a1cc2:	e7b6      	b.n	80a1c32 <__aeabi_ddiv+0x82>
 80a1cc4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a1cc8:	bf04      	itt	eq
 80a1cca:	4301      	orreq	r1, r0
 80a1ccc:	2000      	moveq	r0, #0
 80a1cce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a1cd2:	bf88      	it	hi
 80a1cd4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a1cd8:	f63f aeaf 	bhi.w	80a1a3a <__aeabi_dmul+0xde>
 80a1cdc:	ebb5 0c03 	subs.w	ip, r5, r3
 80a1ce0:	bf04      	itt	eq
 80a1ce2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a1ce6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a1cea:	f150 0000 	adcs.w	r0, r0, #0
 80a1cee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a1cf2:	bd70      	pop	{r4, r5, r6, pc}
 80a1cf4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a1cf8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a1cfc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a1d00:	bfc2      	ittt	gt
 80a1d02:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a1d06:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a1d0a:	bd70      	popgt	{r4, r5, r6, pc}
 80a1d0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a1d10:	f04f 0e00 	mov.w	lr, #0
 80a1d14:	3c01      	subs	r4, #1
 80a1d16:	e690      	b.n	80a1a3a <__aeabi_dmul+0xde>
 80a1d18:	ea45 0e06 	orr.w	lr, r5, r6
 80a1d1c:	e68d      	b.n	80a1a3a <__aeabi_dmul+0xde>
 80a1d1e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a1d22:	ea94 0f0c 	teq	r4, ip
 80a1d26:	bf08      	it	eq
 80a1d28:	ea95 0f0c 	teqeq	r5, ip
 80a1d2c:	f43f af3b 	beq.w	80a1ba6 <__aeabi_dmul+0x24a>
 80a1d30:	ea94 0f0c 	teq	r4, ip
 80a1d34:	d10a      	bne.n	80a1d4c <__aeabi_ddiv+0x19c>
 80a1d36:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a1d3a:	f47f af34 	bne.w	80a1ba6 <__aeabi_dmul+0x24a>
 80a1d3e:	ea95 0f0c 	teq	r5, ip
 80a1d42:	f47f af25 	bne.w	80a1b90 <__aeabi_dmul+0x234>
 80a1d46:	4610      	mov	r0, r2
 80a1d48:	4619      	mov	r1, r3
 80a1d4a:	e72c      	b.n	80a1ba6 <__aeabi_dmul+0x24a>
 80a1d4c:	ea95 0f0c 	teq	r5, ip
 80a1d50:	d106      	bne.n	80a1d60 <__aeabi_ddiv+0x1b0>
 80a1d52:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a1d56:	f43f aefd 	beq.w	80a1b54 <__aeabi_dmul+0x1f8>
 80a1d5a:	4610      	mov	r0, r2
 80a1d5c:	4619      	mov	r1, r3
 80a1d5e:	e722      	b.n	80a1ba6 <__aeabi_dmul+0x24a>
 80a1d60:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a1d64:	bf18      	it	ne
 80a1d66:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a1d6a:	f47f aec5 	bne.w	80a1af8 <__aeabi_dmul+0x19c>
 80a1d6e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a1d72:	f47f af0d 	bne.w	80a1b90 <__aeabi_dmul+0x234>
 80a1d76:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a1d7a:	f47f aeeb 	bne.w	80a1b54 <__aeabi_dmul+0x1f8>
 80a1d7e:	e712      	b.n	80a1ba6 <__aeabi_dmul+0x24a>

080a1d80 <__gedf2>:
 80a1d80:	f04f 3cff 	mov.w	ip, #4294967295
 80a1d84:	e006      	b.n	80a1d94 <__cmpdf2+0x4>
 80a1d86:	bf00      	nop

080a1d88 <__ledf2>:
 80a1d88:	f04f 0c01 	mov.w	ip, #1
 80a1d8c:	e002      	b.n	80a1d94 <__cmpdf2+0x4>
 80a1d8e:	bf00      	nop

080a1d90 <__cmpdf2>:
 80a1d90:	f04f 0c01 	mov.w	ip, #1
 80a1d94:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a1d98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a1d9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a1da0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a1da4:	bf18      	it	ne
 80a1da6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a1daa:	d01b      	beq.n	80a1de4 <__cmpdf2+0x54>
 80a1dac:	b001      	add	sp, #4
 80a1dae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a1db2:	bf0c      	ite	eq
 80a1db4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a1db8:	ea91 0f03 	teqne	r1, r3
 80a1dbc:	bf02      	ittt	eq
 80a1dbe:	ea90 0f02 	teqeq	r0, r2
 80a1dc2:	2000      	moveq	r0, #0
 80a1dc4:	4770      	bxeq	lr
 80a1dc6:	f110 0f00 	cmn.w	r0, #0
 80a1dca:	ea91 0f03 	teq	r1, r3
 80a1dce:	bf58      	it	pl
 80a1dd0:	4299      	cmppl	r1, r3
 80a1dd2:	bf08      	it	eq
 80a1dd4:	4290      	cmpeq	r0, r2
 80a1dd6:	bf2c      	ite	cs
 80a1dd8:	17d8      	asrcs	r0, r3, #31
 80a1dda:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a1dde:	f040 0001 	orr.w	r0, r0, #1
 80a1de2:	4770      	bx	lr
 80a1de4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a1de8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a1dec:	d102      	bne.n	80a1df4 <__cmpdf2+0x64>
 80a1dee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a1df2:	d107      	bne.n	80a1e04 <__cmpdf2+0x74>
 80a1df4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a1df8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a1dfc:	d1d6      	bne.n	80a1dac <__cmpdf2+0x1c>
 80a1dfe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a1e02:	d0d3      	beq.n	80a1dac <__cmpdf2+0x1c>
 80a1e04:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a1e08:	4770      	bx	lr
 80a1e0a:	bf00      	nop

080a1e0c <__aeabi_cdrcmple>:
 80a1e0c:	4684      	mov	ip, r0
 80a1e0e:	4610      	mov	r0, r2
 80a1e10:	4662      	mov	r2, ip
 80a1e12:	468c      	mov	ip, r1
 80a1e14:	4619      	mov	r1, r3
 80a1e16:	4663      	mov	r3, ip
 80a1e18:	e000      	b.n	80a1e1c <__aeabi_cdcmpeq>
 80a1e1a:	bf00      	nop

080a1e1c <__aeabi_cdcmpeq>:
 80a1e1c:	b501      	push	{r0, lr}
 80a1e1e:	f7ff ffb7 	bl	80a1d90 <__cmpdf2>
 80a1e22:	2800      	cmp	r0, #0
 80a1e24:	bf48      	it	mi
 80a1e26:	f110 0f00 	cmnmi.w	r0, #0
 80a1e2a:	bd01      	pop	{r0, pc}

080a1e2c <__aeabi_dcmpeq>:
 80a1e2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a1e30:	f7ff fff4 	bl	80a1e1c <__aeabi_cdcmpeq>
 80a1e34:	bf0c      	ite	eq
 80a1e36:	2001      	moveq	r0, #1
 80a1e38:	2000      	movne	r0, #0
 80a1e3a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a1e3e:	bf00      	nop

080a1e40 <__aeabi_dcmplt>:
 80a1e40:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a1e44:	f7ff ffea 	bl	80a1e1c <__aeabi_cdcmpeq>
 80a1e48:	bf34      	ite	cc
 80a1e4a:	2001      	movcc	r0, #1
 80a1e4c:	2000      	movcs	r0, #0
 80a1e4e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a1e52:	bf00      	nop

080a1e54 <__aeabi_dcmple>:
 80a1e54:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a1e58:	f7ff ffe0 	bl	80a1e1c <__aeabi_cdcmpeq>
 80a1e5c:	bf94      	ite	ls
 80a1e5e:	2001      	movls	r0, #1
 80a1e60:	2000      	movhi	r0, #0
 80a1e62:	f85d fb08 	ldr.w	pc, [sp], #8
 80a1e66:	bf00      	nop

080a1e68 <__aeabi_dcmpge>:
 80a1e68:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a1e6c:	f7ff ffce 	bl	80a1e0c <__aeabi_cdrcmple>
 80a1e70:	bf94      	ite	ls
 80a1e72:	2001      	movls	r0, #1
 80a1e74:	2000      	movhi	r0, #0
 80a1e76:	f85d fb08 	ldr.w	pc, [sp], #8
 80a1e7a:	bf00      	nop

080a1e7c <__aeabi_dcmpgt>:
 80a1e7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a1e80:	f7ff ffc4 	bl	80a1e0c <__aeabi_cdrcmple>
 80a1e84:	bf34      	ite	cc
 80a1e86:	2001      	movcc	r0, #1
 80a1e88:	2000      	movcs	r0, #0
 80a1e8a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a1e8e:	bf00      	nop

080a1e90 <__aeabi_dcmpun>:
 80a1e90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a1e94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a1e98:	d102      	bne.n	80a1ea0 <__aeabi_dcmpun+0x10>
 80a1e9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a1e9e:	d10a      	bne.n	80a1eb6 <__aeabi_dcmpun+0x26>
 80a1ea0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a1ea4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a1ea8:	d102      	bne.n	80a1eb0 <__aeabi_dcmpun+0x20>
 80a1eaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a1eae:	d102      	bne.n	80a1eb6 <__aeabi_dcmpun+0x26>
 80a1eb0:	f04f 0000 	mov.w	r0, #0
 80a1eb4:	4770      	bx	lr
 80a1eb6:	f04f 0001 	mov.w	r0, #1
 80a1eba:	4770      	bx	lr

080a1ebc <__aeabi_d2iz>:
 80a1ebc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a1ec0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a1ec4:	d215      	bcs.n	80a1ef2 <__aeabi_d2iz+0x36>
 80a1ec6:	d511      	bpl.n	80a1eec <__aeabi_d2iz+0x30>
 80a1ec8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a1ecc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a1ed0:	d912      	bls.n	80a1ef8 <__aeabi_d2iz+0x3c>
 80a1ed2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a1ed6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a1eda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a1ede:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a1ee2:	fa23 f002 	lsr.w	r0, r3, r2
 80a1ee6:	bf18      	it	ne
 80a1ee8:	4240      	negne	r0, r0
 80a1eea:	4770      	bx	lr
 80a1eec:	f04f 0000 	mov.w	r0, #0
 80a1ef0:	4770      	bx	lr
 80a1ef2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a1ef6:	d105      	bne.n	80a1f04 <__aeabi_d2iz+0x48>
 80a1ef8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a1efc:	bf08      	it	eq
 80a1efe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a1f02:	4770      	bx	lr
 80a1f04:	f04f 0000 	mov.w	r0, #0
 80a1f08:	4770      	bx	lr
 80a1f0a:	bf00      	nop

080a1f0c <__aeabi_d2uiz>:
 80a1f0c:	004a      	lsls	r2, r1, #1
 80a1f0e:	d211      	bcs.n	80a1f34 <__aeabi_d2uiz+0x28>
 80a1f10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a1f14:	d211      	bcs.n	80a1f3a <__aeabi_d2uiz+0x2e>
 80a1f16:	d50d      	bpl.n	80a1f34 <__aeabi_d2uiz+0x28>
 80a1f18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a1f1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a1f20:	d40e      	bmi.n	80a1f40 <__aeabi_d2uiz+0x34>
 80a1f22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a1f26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a1f2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a1f2e:	fa23 f002 	lsr.w	r0, r3, r2
 80a1f32:	4770      	bx	lr
 80a1f34:	f04f 0000 	mov.w	r0, #0
 80a1f38:	4770      	bx	lr
 80a1f3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a1f3e:	d102      	bne.n	80a1f46 <__aeabi_d2uiz+0x3a>
 80a1f40:	f04f 30ff 	mov.w	r0, #4294967295
 80a1f44:	4770      	bx	lr
 80a1f46:	f04f 0000 	mov.w	r0, #0
 80a1f4a:	4770      	bx	lr

080a1f4c <__aeabi_d2f>:
 80a1f4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a1f50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a1f54:	bf24      	itt	cs
 80a1f56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a1f5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a1f5e:	d90d      	bls.n	80a1f7c <__aeabi_d2f+0x30>
 80a1f60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a1f64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a1f68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a1f6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a1f70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a1f74:	bf08      	it	eq
 80a1f76:	f020 0001 	biceq.w	r0, r0, #1
 80a1f7a:	4770      	bx	lr
 80a1f7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a1f80:	d121      	bne.n	80a1fc6 <__aeabi_d2f+0x7a>
 80a1f82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a1f86:	bfbc      	itt	lt
 80a1f88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a1f8c:	4770      	bxlt	lr
 80a1f8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a1f92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a1f96:	f1c2 0218 	rsb	r2, r2, #24
 80a1f9a:	f1c2 0c20 	rsb	ip, r2, #32
 80a1f9e:	fa10 f30c 	lsls.w	r3, r0, ip
 80a1fa2:	fa20 f002 	lsr.w	r0, r0, r2
 80a1fa6:	bf18      	it	ne
 80a1fa8:	f040 0001 	orrne.w	r0, r0, #1
 80a1fac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a1fb0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a1fb4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a1fb8:	ea40 000c 	orr.w	r0, r0, ip
 80a1fbc:	fa23 f302 	lsr.w	r3, r3, r2
 80a1fc0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a1fc4:	e7cc      	b.n	80a1f60 <__aeabi_d2f+0x14>
 80a1fc6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a1fca:	d107      	bne.n	80a1fdc <__aeabi_d2f+0x90>
 80a1fcc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a1fd0:	bf1e      	ittt	ne
 80a1fd2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a1fd6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a1fda:	4770      	bxne	lr
 80a1fdc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a1fe0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a1fe4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a1fe8:	4770      	bx	lr
 80a1fea:	bf00      	nop

080a1fec <__aeabi_frsub>:
 80a1fec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a1ff0:	e002      	b.n	80a1ff8 <__addsf3>
 80a1ff2:	bf00      	nop

080a1ff4 <__aeabi_fsub>:
 80a1ff4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a1ff8 <__addsf3>:
 80a1ff8:	0042      	lsls	r2, r0, #1
 80a1ffa:	bf1f      	itttt	ne
 80a1ffc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a2000:	ea92 0f03 	teqne	r2, r3
 80a2004:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a2008:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a200c:	d06a      	beq.n	80a20e4 <__addsf3+0xec>
 80a200e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a2012:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a2016:	bfc1      	itttt	gt
 80a2018:	18d2      	addgt	r2, r2, r3
 80a201a:	4041      	eorgt	r1, r0
 80a201c:	4048      	eorgt	r0, r1
 80a201e:	4041      	eorgt	r1, r0
 80a2020:	bfb8      	it	lt
 80a2022:	425b      	neglt	r3, r3
 80a2024:	2b19      	cmp	r3, #25
 80a2026:	bf88      	it	hi
 80a2028:	4770      	bxhi	lr
 80a202a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a202e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2032:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a2036:	bf18      	it	ne
 80a2038:	4240      	negne	r0, r0
 80a203a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a203e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a2042:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a2046:	bf18      	it	ne
 80a2048:	4249      	negne	r1, r1
 80a204a:	ea92 0f03 	teq	r2, r3
 80a204e:	d03f      	beq.n	80a20d0 <__addsf3+0xd8>
 80a2050:	f1a2 0201 	sub.w	r2, r2, #1
 80a2054:	fa41 fc03 	asr.w	ip, r1, r3
 80a2058:	eb10 000c 	adds.w	r0, r0, ip
 80a205c:	f1c3 0320 	rsb	r3, r3, #32
 80a2060:	fa01 f103 	lsl.w	r1, r1, r3
 80a2064:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a2068:	d502      	bpl.n	80a2070 <__addsf3+0x78>
 80a206a:	4249      	negs	r1, r1
 80a206c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a2070:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a2074:	d313      	bcc.n	80a209e <__addsf3+0xa6>
 80a2076:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a207a:	d306      	bcc.n	80a208a <__addsf3+0x92>
 80a207c:	0840      	lsrs	r0, r0, #1
 80a207e:	ea4f 0131 	mov.w	r1, r1, rrx
 80a2082:	f102 0201 	add.w	r2, r2, #1
 80a2086:	2afe      	cmp	r2, #254	; 0xfe
 80a2088:	d251      	bcs.n	80a212e <__addsf3+0x136>
 80a208a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a208e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2092:	bf08      	it	eq
 80a2094:	f020 0001 	biceq.w	r0, r0, #1
 80a2098:	ea40 0003 	orr.w	r0, r0, r3
 80a209c:	4770      	bx	lr
 80a209e:	0049      	lsls	r1, r1, #1
 80a20a0:	eb40 0000 	adc.w	r0, r0, r0
 80a20a4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a20a8:	f1a2 0201 	sub.w	r2, r2, #1
 80a20ac:	d1ed      	bne.n	80a208a <__addsf3+0x92>
 80a20ae:	fab0 fc80 	clz	ip, r0
 80a20b2:	f1ac 0c08 	sub.w	ip, ip, #8
 80a20b6:	ebb2 020c 	subs.w	r2, r2, ip
 80a20ba:	fa00 f00c 	lsl.w	r0, r0, ip
 80a20be:	bfaa      	itet	ge
 80a20c0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a20c4:	4252      	neglt	r2, r2
 80a20c6:	4318      	orrge	r0, r3
 80a20c8:	bfbc      	itt	lt
 80a20ca:	40d0      	lsrlt	r0, r2
 80a20cc:	4318      	orrlt	r0, r3
 80a20ce:	4770      	bx	lr
 80a20d0:	f092 0f00 	teq	r2, #0
 80a20d4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a20d8:	bf06      	itte	eq
 80a20da:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a20de:	3201      	addeq	r2, #1
 80a20e0:	3b01      	subne	r3, #1
 80a20e2:	e7b5      	b.n	80a2050 <__addsf3+0x58>
 80a20e4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a20e8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a20ec:	bf18      	it	ne
 80a20ee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a20f2:	d021      	beq.n	80a2138 <__addsf3+0x140>
 80a20f4:	ea92 0f03 	teq	r2, r3
 80a20f8:	d004      	beq.n	80a2104 <__addsf3+0x10c>
 80a20fa:	f092 0f00 	teq	r2, #0
 80a20fe:	bf08      	it	eq
 80a2100:	4608      	moveq	r0, r1
 80a2102:	4770      	bx	lr
 80a2104:	ea90 0f01 	teq	r0, r1
 80a2108:	bf1c      	itt	ne
 80a210a:	2000      	movne	r0, #0
 80a210c:	4770      	bxne	lr
 80a210e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a2112:	d104      	bne.n	80a211e <__addsf3+0x126>
 80a2114:	0040      	lsls	r0, r0, #1
 80a2116:	bf28      	it	cs
 80a2118:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a211c:	4770      	bx	lr
 80a211e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a2122:	bf3c      	itt	cc
 80a2124:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a2128:	4770      	bxcc	lr
 80a212a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a212e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a2132:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2136:	4770      	bx	lr
 80a2138:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a213c:	bf16      	itet	ne
 80a213e:	4608      	movne	r0, r1
 80a2140:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a2144:	4601      	movne	r1, r0
 80a2146:	0242      	lsls	r2, r0, #9
 80a2148:	bf06      	itte	eq
 80a214a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a214e:	ea90 0f01 	teqeq	r0, r1
 80a2152:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a2156:	4770      	bx	lr

080a2158 <__aeabi_ui2f>:
 80a2158:	f04f 0300 	mov.w	r3, #0
 80a215c:	e004      	b.n	80a2168 <__aeabi_i2f+0x8>
 80a215e:	bf00      	nop

080a2160 <__aeabi_i2f>:
 80a2160:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a2164:	bf48      	it	mi
 80a2166:	4240      	negmi	r0, r0
 80a2168:	ea5f 0c00 	movs.w	ip, r0
 80a216c:	bf08      	it	eq
 80a216e:	4770      	bxeq	lr
 80a2170:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a2174:	4601      	mov	r1, r0
 80a2176:	f04f 0000 	mov.w	r0, #0
 80a217a:	e01c      	b.n	80a21b6 <__aeabi_l2f+0x2a>

080a217c <__aeabi_ul2f>:
 80a217c:	ea50 0201 	orrs.w	r2, r0, r1
 80a2180:	bf08      	it	eq
 80a2182:	4770      	bxeq	lr
 80a2184:	f04f 0300 	mov.w	r3, #0
 80a2188:	e00a      	b.n	80a21a0 <__aeabi_l2f+0x14>
 80a218a:	bf00      	nop

080a218c <__aeabi_l2f>:
 80a218c:	ea50 0201 	orrs.w	r2, r0, r1
 80a2190:	bf08      	it	eq
 80a2192:	4770      	bxeq	lr
 80a2194:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a2198:	d502      	bpl.n	80a21a0 <__aeabi_l2f+0x14>
 80a219a:	4240      	negs	r0, r0
 80a219c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a21a0:	ea5f 0c01 	movs.w	ip, r1
 80a21a4:	bf02      	ittt	eq
 80a21a6:	4684      	moveq	ip, r0
 80a21a8:	4601      	moveq	r1, r0
 80a21aa:	2000      	moveq	r0, #0
 80a21ac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a21b0:	bf08      	it	eq
 80a21b2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a21b6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a21ba:	fabc f28c 	clz	r2, ip
 80a21be:	3a08      	subs	r2, #8
 80a21c0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a21c4:	db10      	blt.n	80a21e8 <__aeabi_l2f+0x5c>
 80a21c6:	fa01 fc02 	lsl.w	ip, r1, r2
 80a21ca:	4463      	add	r3, ip
 80a21cc:	fa00 fc02 	lsl.w	ip, r0, r2
 80a21d0:	f1c2 0220 	rsb	r2, r2, #32
 80a21d4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a21d8:	fa20 f202 	lsr.w	r2, r0, r2
 80a21dc:	eb43 0002 	adc.w	r0, r3, r2
 80a21e0:	bf08      	it	eq
 80a21e2:	f020 0001 	biceq.w	r0, r0, #1
 80a21e6:	4770      	bx	lr
 80a21e8:	f102 0220 	add.w	r2, r2, #32
 80a21ec:	fa01 fc02 	lsl.w	ip, r1, r2
 80a21f0:	f1c2 0220 	rsb	r2, r2, #32
 80a21f4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a21f8:	fa21 f202 	lsr.w	r2, r1, r2
 80a21fc:	eb43 0002 	adc.w	r0, r3, r2
 80a2200:	bf08      	it	eq
 80a2202:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a2206:	4770      	bx	lr

080a2208 <__aeabi_fmul>:
 80a2208:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a220c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a2210:	bf1e      	ittt	ne
 80a2212:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a2216:	ea92 0f0c 	teqne	r2, ip
 80a221a:	ea93 0f0c 	teqne	r3, ip
 80a221e:	d06f      	beq.n	80a2300 <__aeabi_fmul+0xf8>
 80a2220:	441a      	add	r2, r3
 80a2222:	ea80 0c01 	eor.w	ip, r0, r1
 80a2226:	0240      	lsls	r0, r0, #9
 80a2228:	bf18      	it	ne
 80a222a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a222e:	d01e      	beq.n	80a226e <__aeabi_fmul+0x66>
 80a2230:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a2234:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a2238:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a223c:	fba0 3101 	umull	r3, r1, r0, r1
 80a2240:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a2244:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a2248:	bf3e      	ittt	cc
 80a224a:	0049      	lslcc	r1, r1, #1
 80a224c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a2250:	005b      	lslcc	r3, r3, #1
 80a2252:	ea40 0001 	orr.w	r0, r0, r1
 80a2256:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a225a:	2afd      	cmp	r2, #253	; 0xfd
 80a225c:	d81d      	bhi.n	80a229a <__aeabi_fmul+0x92>
 80a225e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a2262:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2266:	bf08      	it	eq
 80a2268:	f020 0001 	biceq.w	r0, r0, #1
 80a226c:	4770      	bx	lr
 80a226e:	f090 0f00 	teq	r0, #0
 80a2272:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a2276:	bf08      	it	eq
 80a2278:	0249      	lsleq	r1, r1, #9
 80a227a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a227e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a2282:	3a7f      	subs	r2, #127	; 0x7f
 80a2284:	bfc2      	ittt	gt
 80a2286:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a228a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a228e:	4770      	bxgt	lr
 80a2290:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2294:	f04f 0300 	mov.w	r3, #0
 80a2298:	3a01      	subs	r2, #1
 80a229a:	dc5d      	bgt.n	80a2358 <__aeabi_fmul+0x150>
 80a229c:	f112 0f19 	cmn.w	r2, #25
 80a22a0:	bfdc      	itt	le
 80a22a2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a22a6:	4770      	bxle	lr
 80a22a8:	f1c2 0200 	rsb	r2, r2, #0
 80a22ac:	0041      	lsls	r1, r0, #1
 80a22ae:	fa21 f102 	lsr.w	r1, r1, r2
 80a22b2:	f1c2 0220 	rsb	r2, r2, #32
 80a22b6:	fa00 fc02 	lsl.w	ip, r0, r2
 80a22ba:	ea5f 0031 	movs.w	r0, r1, rrx
 80a22be:	f140 0000 	adc.w	r0, r0, #0
 80a22c2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a22c6:	bf08      	it	eq
 80a22c8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a22cc:	4770      	bx	lr
 80a22ce:	f092 0f00 	teq	r2, #0
 80a22d2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a22d6:	bf02      	ittt	eq
 80a22d8:	0040      	lsleq	r0, r0, #1
 80a22da:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a22de:	3a01      	subeq	r2, #1
 80a22e0:	d0f9      	beq.n	80a22d6 <__aeabi_fmul+0xce>
 80a22e2:	ea40 000c 	orr.w	r0, r0, ip
 80a22e6:	f093 0f00 	teq	r3, #0
 80a22ea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a22ee:	bf02      	ittt	eq
 80a22f0:	0049      	lsleq	r1, r1, #1
 80a22f2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a22f6:	3b01      	subeq	r3, #1
 80a22f8:	d0f9      	beq.n	80a22ee <__aeabi_fmul+0xe6>
 80a22fa:	ea41 010c 	orr.w	r1, r1, ip
 80a22fe:	e78f      	b.n	80a2220 <__aeabi_fmul+0x18>
 80a2300:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a2304:	ea92 0f0c 	teq	r2, ip
 80a2308:	bf18      	it	ne
 80a230a:	ea93 0f0c 	teqne	r3, ip
 80a230e:	d00a      	beq.n	80a2326 <__aeabi_fmul+0x11e>
 80a2310:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a2314:	bf18      	it	ne
 80a2316:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a231a:	d1d8      	bne.n	80a22ce <__aeabi_fmul+0xc6>
 80a231c:	ea80 0001 	eor.w	r0, r0, r1
 80a2320:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a2324:	4770      	bx	lr
 80a2326:	f090 0f00 	teq	r0, #0
 80a232a:	bf17      	itett	ne
 80a232c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a2330:	4608      	moveq	r0, r1
 80a2332:	f091 0f00 	teqne	r1, #0
 80a2336:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a233a:	d014      	beq.n	80a2366 <__aeabi_fmul+0x15e>
 80a233c:	ea92 0f0c 	teq	r2, ip
 80a2340:	d101      	bne.n	80a2346 <__aeabi_fmul+0x13e>
 80a2342:	0242      	lsls	r2, r0, #9
 80a2344:	d10f      	bne.n	80a2366 <__aeabi_fmul+0x15e>
 80a2346:	ea93 0f0c 	teq	r3, ip
 80a234a:	d103      	bne.n	80a2354 <__aeabi_fmul+0x14c>
 80a234c:	024b      	lsls	r3, r1, #9
 80a234e:	bf18      	it	ne
 80a2350:	4608      	movne	r0, r1
 80a2352:	d108      	bne.n	80a2366 <__aeabi_fmul+0x15e>
 80a2354:	ea80 0001 	eor.w	r0, r0, r1
 80a2358:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a235c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2360:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2364:	4770      	bx	lr
 80a2366:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a236a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a236e:	4770      	bx	lr

080a2370 <__aeabi_fdiv>:
 80a2370:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2374:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a2378:	bf1e      	ittt	ne
 80a237a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a237e:	ea92 0f0c 	teqne	r2, ip
 80a2382:	ea93 0f0c 	teqne	r3, ip
 80a2386:	d069      	beq.n	80a245c <__aeabi_fdiv+0xec>
 80a2388:	eba2 0203 	sub.w	r2, r2, r3
 80a238c:	ea80 0c01 	eor.w	ip, r0, r1
 80a2390:	0249      	lsls	r1, r1, #9
 80a2392:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a2396:	d037      	beq.n	80a2408 <__aeabi_fdiv+0x98>
 80a2398:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a239c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a23a0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a23a4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a23a8:	428b      	cmp	r3, r1
 80a23aa:	bf38      	it	cc
 80a23ac:	005b      	lslcc	r3, r3, #1
 80a23ae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a23b2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a23b6:	428b      	cmp	r3, r1
 80a23b8:	bf24      	itt	cs
 80a23ba:	1a5b      	subcs	r3, r3, r1
 80a23bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80a23c0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a23c4:	bf24      	itt	cs
 80a23c6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a23ca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a23ce:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a23d2:	bf24      	itt	cs
 80a23d4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a23d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a23dc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a23e0:	bf24      	itt	cs
 80a23e2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a23e6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a23ea:	011b      	lsls	r3, r3, #4
 80a23ec:	bf18      	it	ne
 80a23ee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a23f2:	d1e0      	bne.n	80a23b6 <__aeabi_fdiv+0x46>
 80a23f4:	2afd      	cmp	r2, #253	; 0xfd
 80a23f6:	f63f af50 	bhi.w	80a229a <__aeabi_fmul+0x92>
 80a23fa:	428b      	cmp	r3, r1
 80a23fc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2400:	bf08      	it	eq
 80a2402:	f020 0001 	biceq.w	r0, r0, #1
 80a2406:	4770      	bx	lr
 80a2408:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a240c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a2410:	327f      	adds	r2, #127	; 0x7f
 80a2412:	bfc2      	ittt	gt
 80a2414:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a2418:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a241c:	4770      	bxgt	lr
 80a241e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2422:	f04f 0300 	mov.w	r3, #0
 80a2426:	3a01      	subs	r2, #1
 80a2428:	e737      	b.n	80a229a <__aeabi_fmul+0x92>
 80a242a:	f092 0f00 	teq	r2, #0
 80a242e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a2432:	bf02      	ittt	eq
 80a2434:	0040      	lsleq	r0, r0, #1
 80a2436:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a243a:	3a01      	subeq	r2, #1
 80a243c:	d0f9      	beq.n	80a2432 <__aeabi_fdiv+0xc2>
 80a243e:	ea40 000c 	orr.w	r0, r0, ip
 80a2442:	f093 0f00 	teq	r3, #0
 80a2446:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a244a:	bf02      	ittt	eq
 80a244c:	0049      	lsleq	r1, r1, #1
 80a244e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a2452:	3b01      	subeq	r3, #1
 80a2454:	d0f9      	beq.n	80a244a <__aeabi_fdiv+0xda>
 80a2456:	ea41 010c 	orr.w	r1, r1, ip
 80a245a:	e795      	b.n	80a2388 <__aeabi_fdiv+0x18>
 80a245c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a2460:	ea92 0f0c 	teq	r2, ip
 80a2464:	d108      	bne.n	80a2478 <__aeabi_fdiv+0x108>
 80a2466:	0242      	lsls	r2, r0, #9
 80a2468:	f47f af7d 	bne.w	80a2366 <__aeabi_fmul+0x15e>
 80a246c:	ea93 0f0c 	teq	r3, ip
 80a2470:	f47f af70 	bne.w	80a2354 <__aeabi_fmul+0x14c>
 80a2474:	4608      	mov	r0, r1
 80a2476:	e776      	b.n	80a2366 <__aeabi_fmul+0x15e>
 80a2478:	ea93 0f0c 	teq	r3, ip
 80a247c:	d104      	bne.n	80a2488 <__aeabi_fdiv+0x118>
 80a247e:	024b      	lsls	r3, r1, #9
 80a2480:	f43f af4c 	beq.w	80a231c <__aeabi_fmul+0x114>
 80a2484:	4608      	mov	r0, r1
 80a2486:	e76e      	b.n	80a2366 <__aeabi_fmul+0x15e>
 80a2488:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a248c:	bf18      	it	ne
 80a248e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a2492:	d1ca      	bne.n	80a242a <__aeabi_fdiv+0xba>
 80a2494:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a2498:	f47f af5c 	bne.w	80a2354 <__aeabi_fmul+0x14c>
 80a249c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a24a0:	f47f af3c 	bne.w	80a231c <__aeabi_fmul+0x114>
 80a24a4:	e75f      	b.n	80a2366 <__aeabi_fmul+0x15e>
 80a24a6:	bf00      	nop

080a24a8 <__aeabi_fcmpun>:
 80a24a8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a24ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a24b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a24b4:	d102      	bne.n	80a24bc <__aeabi_fcmpun+0x14>
 80a24b6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a24ba:	d108      	bne.n	80a24ce <__aeabi_fcmpun+0x26>
 80a24bc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a24c0:	d102      	bne.n	80a24c8 <__aeabi_fcmpun+0x20>
 80a24c2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a24c6:	d102      	bne.n	80a24ce <__aeabi_fcmpun+0x26>
 80a24c8:	f04f 0000 	mov.w	r0, #0
 80a24cc:	4770      	bx	lr
 80a24ce:	f04f 0001 	mov.w	r0, #1
 80a24d2:	4770      	bx	lr

080a24d4 <__cxa_atexit>:
 80a24d4:	b510      	push	{r4, lr}
 80a24d6:	4c05      	ldr	r4, [pc, #20]	; (80a24ec <__cxa_atexit+0x18>)
 80a24d8:	4613      	mov	r3, r2
 80a24da:	b12c      	cbz	r4, 80a24e8 <__cxa_atexit+0x14>
 80a24dc:	460a      	mov	r2, r1
 80a24de:	4601      	mov	r1, r0
 80a24e0:	2002      	movs	r0, #2
 80a24e2:	f3af 8000 	nop.w
 80a24e6:	bd10      	pop	{r4, pc}
 80a24e8:	4620      	mov	r0, r4
 80a24ea:	bd10      	pop	{r4, pc}
 80a24ec:	00000000 	.word	0x00000000

080a24f0 <memcpy>:
 80a24f0:	b510      	push	{r4, lr}
 80a24f2:	1e43      	subs	r3, r0, #1
 80a24f4:	440a      	add	r2, r1
 80a24f6:	4291      	cmp	r1, r2
 80a24f8:	d004      	beq.n	80a2504 <memcpy+0x14>
 80a24fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a24fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a2502:	e7f8      	b.n	80a24f6 <memcpy+0x6>
 80a2504:	bd10      	pop	{r4, pc}

080a2506 <memset>:
 80a2506:	4603      	mov	r3, r0
 80a2508:	4402      	add	r2, r0
 80a250a:	4293      	cmp	r3, r2
 80a250c:	d002      	beq.n	80a2514 <memset+0xe>
 80a250e:	f803 1b01 	strb.w	r1, [r3], #1
 80a2512:	e7fa      	b.n	80a250a <memset+0x4>
 80a2514:	4770      	bx	lr
	...

080a2518 <srand>:
 80a2518:	b538      	push	{r3, r4, r5, lr}
 80a251a:	4b12      	ldr	r3, [pc, #72]	; (80a2564 <srand+0x4c>)
 80a251c:	4605      	mov	r5, r0
 80a251e:	681c      	ldr	r4, [r3, #0]
 80a2520:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2522:	b9d3      	cbnz	r3, 80a255a <srand+0x42>
 80a2524:	2018      	movs	r0, #24
 80a2526:	f7fe f911 	bl	80a074c <malloc>
 80a252a:	f243 330e 	movw	r3, #13070	; 0x330e
 80a252e:	63a0      	str	r0, [r4, #56]	; 0x38
 80a2530:	8003      	strh	r3, [r0, #0]
 80a2532:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a2536:	8043      	strh	r3, [r0, #2]
 80a2538:	f241 2334 	movw	r3, #4660	; 0x1234
 80a253c:	8083      	strh	r3, [r0, #4]
 80a253e:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a2542:	80c3      	strh	r3, [r0, #6]
 80a2544:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a2548:	8103      	strh	r3, [r0, #8]
 80a254a:	2305      	movs	r3, #5
 80a254c:	8143      	strh	r3, [r0, #10]
 80a254e:	230b      	movs	r3, #11
 80a2550:	8183      	strh	r3, [r0, #12]
 80a2552:	2201      	movs	r2, #1
 80a2554:	2300      	movs	r3, #0
 80a2556:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a255a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a255c:	2200      	movs	r2, #0
 80a255e:	611d      	str	r5, [r3, #16]
 80a2560:	615a      	str	r2, [r3, #20]
 80a2562:	bd38      	pop	{r3, r4, r5, pc}
 80a2564:	20000068 	.word	0x20000068

080a2568 <strlen>:
 80a2568:	4603      	mov	r3, r0
 80a256a:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a256e:	2a00      	cmp	r2, #0
 80a2570:	d1fb      	bne.n	80a256a <strlen+0x2>
 80a2572:	1a18      	subs	r0, r3, r0
 80a2574:	3801      	subs	r0, #1
 80a2576:	4770      	bx	lr

080a2578 <dynalib_user>:
 80a2578:	0021 080a 0061 080a 008d 080a 0091 080a     !...a...........
 80a2588:	0000 0000 6146 6c69 6465 7420 206f 6572     ....Failed to re
 80a2598:	6461 6620 6f72 206d 4844 2054 6573 736e     ad from DHT sens
 80a25a8:	726f 0021 7548 696d 6964 7974 203a 2000     or!.Humidity: . 
 80a25b8:	0925 5400 6d65 6570 6172 7574 6572 203a     %..Temperature: 
 80a25c8:	2000 432a 0020 616e 006e 766f 0066 002e     . *C .nan.ovf...
 80a25d8:	6e69 0066 6162 6475 5300 7265 6169 006c     inf.baud.Serial.
 80a25e8:	5355 5342 7265 6169 316c 7400 7079 0065     USBSerial1.type.
 80a25f8:	6170 6172 006d 6d63 0064 6469 6800 646e     param.cmd.id.hnd
 80a2608:	7300 7274 006d 6966 746c 6c00 6c76 6100     .strm.filt.lvl.a
 80a2618:	6464 6148 646e 656c 0072 6572 6f6d 6576     ddHandler.remove
 80a2628:	6148 646e 656c 0072 6e65 6d75 6148 646e     Handler.enumHand
 80a2638:	656c 7372 4a00 4f53 534e 7274 6165 4c6d     lers.JSONStreamL
 80a2648:	676f 6148 646e 656c 0072 7061 0070 3025     ogHandler.app.%0
 80a2658:	3031 2075 5d00 0020 6425 2c00 0020 2928     10u .] .%d., .()
 80a2668:	203a 2000 005b 6f63 6564 3d20 0020 6925     : . [.code = .%i
 80a2678:	6400 7465 6961 736c 3d20 0020 0a0d 6c00     .details = ....l
 80a2688:	006e 6e66 6300 646f 0065 6564 6174 6c69     n.fn.code.detail
 80a2698:	6e00 6e6f 0065 7274 6361 0065 6e69 6f66     .none.trace.info
 80a26a8:	7700 7261 006e 7265 6f72 0072 6170 696e     .warn.error.pani
 80a26b8:	0063 6c61 006c 005a 2b25 3330 3a64 3025     c.all.Z.%+03d:%0
 80a26c8:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
 80a26d8:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

080a26e8 <_ZTV9IPAddress>:
	...
 80a26f0:	0bf5 080a 0be5 080a 0be7 080a               ............

080a26fc <_ZTV9USBSerial>:
	...
 80a2704:	0cb1 080a 0d01 080a 0d0f 080a 07e5 080a     ................
 80a2714:	0ced 080a 0cb3 080a 0cc9 080a 0cfb 080a     ................
 80a2724:	0cdf 080a 0cad 080a                         ........

080a272c <_ZTV11USARTSerial>:
	...
 80a2734:	0e59 080a 0ea9 080a 0eb7 080a 07e5 080a     Y...............
 80a2744:	0e6d 080a 0e8f 080a 0e7b 080a 0ea3 080a     m.......{.......
 80a2754:	0e5b 080a 0e5f 080a                         [..._...

080a275c <_ZTV7TwoWire>:
	...
 80a2764:	0f5d 080a 0fa7 080a 0f7f 080a 0f5f 080a     ]..........._...
 80a2774:	0f87 080a 0f8f 080a 0f97 080a 0f9f 080a     ................

080a2784 <_ZTVN5spark9WiFiClassE>:
	...
 80a278c:	1077 080a 106d 080a 1063 080a 0fe1 080a     w...m...c.......
 80a279c:	0a3b 080a 1057 080a 104b 080a 1043 080a     ;...W...K...C...
 80a27ac:	1039 080a 102f 080a 0feb 080a               9.../.......

080a27b8 <_ZTVN5spark12NetworkClassE>:
	...
 80a27c0:	1095 080a 109f 080a 10a9 080a 10b3 080a     ................
 80a27d0:	10bd 080a 10c9 080a 10d5 080a 10e1 080a     ................
 80a27e0:	10e9 080a 10f3 080a 10fd 080a               ............

080a27ec <_ZSt7nothrow>:
 80a27ec:	0000 0000                                   ....

080a27f0 <__sf_fake_stdin>:
	...

080a2810 <__sf_fake_stdout>:
	...

080a2830 <__sf_fake_stderr>:
	...
 80a2850:	0043                                        C.

080a2852 <link_const_variable_data_end>:
	...

080a2854 <link_constructors_location>:
 80a2854:	080a0169 	.word	0x080a0169
 80a2858:	080a0185 	.word	0x080a0185
 80a285c:	080a03fd 	.word	0x080a03fd
 80a2860:	080a07b1 	.word	0x080a07b1
 80a2864:	080a0a49 	.word	0x080a0a49
 80a2868:	080a0a59 	.word	0x080a0a59
 80a286c:	080a0a91 	.word	0x080a0a91
 80a2870:	080a1081 	.word	0x080a1081
 80a2874:	080a114d 	.word	0x080a114d
 80a2878:	080a1269 	.word	0x080a1269
 80a287c:	080a135d 	.word	0x080a135d
 80a2880:	080a13e1 	.word	0x080a13e1
 80a2884:	080a14a5 	.word	0x080a14a5
 80a2888:	080a1569 	.word	0x080a1569

080a288c <link_constructors_end>:
 80a288c:	00000000 	.word	0x00000000
